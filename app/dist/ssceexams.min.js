// (function() {
// 'use strict';
	
	// create our ssceexamsuiApp module
	var ssceexamsuiApp = angular
		.module('ssceexamsuiApp', [
			// Angular modules
			'ngAnimate',
			'ngSanitize',
			'ngResource',
			'ngModal',
			'ngRoute',
			// 3rd Party modules
			'nvd3',
			'ui.bootstrap',
			'ui.select',
			'ui.footable',
			'angular-growl',
			'datepicker'
			// 'angularjs-dropdown-multiselect'
		])
		.factory('myCache', function($cacheFactory) {
			return $cacheFactory('myCache');
		})
		.config(['$httpProvider', function($httpProvider) {
			$httpProvider.defaults.headers.common["X-Requested-With"] = 'XmlHttpRequest';
		}])
		.config(['$logProvider', function($logProvider) {
		  	// enable this line to turn off/disable all the logging within controller
			$logProvider.debugEnabled(true);
		}])
		.config(['$provide', '$httpProvider', function($provide, $httpProvider) {
			$provide.factory('notAuthorizedInterceptor', function($q, $rootScope) {
				return {
					responseError: function (response) {
						if (response.status === 401) {
							$rootScope.unauthorized = true;
						}
						return $q.reject(response);
					}
				};
			});
			$httpProvider.interceptors.push('notAuthorizedInterceptor');
		}])
		.config(['$provide', function($provide) {
		  	$provide.decorator('$log', ['$delegate', function ($delegate) {
		  		// this extension adds a date timestamp to all debug logs, it keeps track of the original debug method
			  	var origDebug = $delegate.debug; 
			  	// intercept the call to $log.debug so we can enhance it
			  	$delegate.debug = function () {
			  		var args = [].slice.call(arguments);
			  		args[0] = [new Date().toString(), ': ', args[0]].join('');
			  		// send on our enhanced message to the original debug method
			  		origDebug.apply(null, args);
			  	};
			  	return $delegate;
			  }
			]);
		}])
		.config(function($routeProvider, $locationProvider) {
			
	        var baseRoute = '/';
			console.log('baseRoute in AppJS is: ' + baseRoute);

			$routeProvider
				.when(baseRoute,
				{
					templateUrl:'templates/LoginPage.html',
					controllers:'LoginController'
					// controllerAs:'hlvm'
				})
				.when(baseRoute + 'signup',
				{
					templateUrl:'templates/Signup.html',
					controllers:'SignupController'
					// controllerAs:'suvm'
				})
				.when(baseRoute + 'pricing',
				{
					templateUrl:'templates/Pricing.html',
					controllers:'PricingController'
					// controllerAs:'pvm'
				})
				.when(baseRoute + 'contactus',
				{
					templateUrl:'templates/Contactus.html',
					controllers:'ContactController'
					// controllerAs:'cvm'
				})
				.when(baseRoute + 'registersch',
				{
					templateUrl:'templates/RegisterSchool.html',
					controllers:'RegisterSchoolController'
					// controllerAs:'rsvm'
				})
				.when(baseRoute + 'dashboard',
				{
					templateUrl:'templates/LandingPage.html',
					controllers:'LandingController'
					// controllerAs:'lcvm'
				})
				.when(baseRoute + 'testcenter',
				{
					templateUrl:'templates/TestCenter.html',
					controllers:'TestcenterController'
					// controllerAs:'tcvm'
				})
				.when(baseRoute + 'analytics',
				{
					templateUrl:'templates/Analytics.html',
					controllers:'AnalyticsController'
					// controllerAs:'avm'
				})
				.when(baseRoute + 'profile',
				{
					templateUrl:'templates/Profile.html',
					controllers:'ProfileController'
					// controllerAs:'svm'
				})
				.when(baseRoute + 'sscetemplate',
				{
					templateUrl:'templates/SsceTemplate.html',
					controllers:'SscetemplateController'
					// controllerAs:'stm'
				})
				.when(baseRoute + 'jambtemplate',
				{
					templateUrl:'templates/JambTemplate.html',
					controllers:'JambtemplateController'
					// controllerAs:'jtm'
				})
				.when(baseRoute + 'sscephysicsatemplate',
				{
					templateUrl:'templates/SscePhysicsATemplate.html',
					controllers:'SscephysicsatemplateController'
					// controllerAs:'spatm'
				})
				.when(baseRoute + 'sscephysicsbtemplate',
				{
					templateUrl:'templates/SscePhysicsBTemplate.html',
					controllers:'SscephysicsbtemplateController'
					// controllerAs:'spbtm'
				})
				.when(baseRoute + 'ssceenglishbtemplate',
				{
					templateUrl:'templates/SsceEnglishBTemplate.html',
					controllers:'SsceenglishbtemplateController'
					// controllerAs:'sebtm'
				})
				.when(baseRoute + 'ssceeconomicsbtemplate',
				{
					templateUrl:'templates/SsceEconomicsBTemplate.html',
					controllers:'SsceeconomicsbtemplateController'
					// controllerAs:'secbtm'
				})
				.when(baseRoute + 'sscegovernmentbtemplate',
				{
					templateUrl:'templates/SsceGovernmentBTemplate.html',
					controllers:'SscegovernmentbtemplateController'
					// controllerAs:'sgvbtm'
				})
				.when(baseRoute + 'sscegeographybtemplate',
				{
					templateUrl:'templates/SsceGeographyBTemplate.html',
					controllers:'SscegeographybtemplateController'
					// controllerAs:'sgbtm'
				})
				.when(baseRoute + 'sscemathematicsbtemplate',
				{
					templateUrl:'templates/SsceMathematicsBTemplate.html',
					controllers:'SscemathematicsbtemplateController'
					// controllerAs:'smbtm'
				})
				.when(baseRoute + 'ssceagricscibtemplate',
				{
					templateUrl:'templates/SsceAgricSciBTemplate.html',
					controllers:'SsceagricscibtemplateController'
					// controllerAs:'sasbtm'
				})
				.when(baseRoute + 'sscecommercebtemplate',
				{
					templateUrl:'templates/SsceCommerceBTemplate.html',
					controllers:'SscecommercebtemplateController'
					// controllerAs:'scmbtm'
				})
				.when(baseRoute + 'sscebiologybtemplate',
				{
					templateUrl:'templates/SsceBiologyBTemplate.html',
					controllers:'SscebiologybtemplateController'
					// controllerAs:'sbmbtm'
				})
				.when(baseRoute + 'sscelitinengbtemplate',
				{
					templateUrl:'templates/SsceLitInEngBTemplate.html',
					controllers:'SscelitinengbtemplateController'
					// controllerAs:'slietm'
				})
				.when(baseRoute + 'sscechemistrybtemplate',
				{
					templateUrl:'templates/SsceChemistryBTemplate.html',
					controllers:'SscechemistrybtemplateController'
					// controllerAs:'schtm'
				})
				.when('/404',
				{
					templateUrl:'templates/404.html',
					controllers:'ErrorPageController'
				})
				.otherwise({
					redirectTo: baseRoute
				});
			$locationProvider.html5Mode({
				enabled: false,
				requireBase: false
			});
		})	   
		.run(function($rootScope) {
			$rootScope.baseRoute = $(location).attr('pathname');
		})
		.run(function($rootScope, $location) {
			// $rootScope.$on('$routeChangeStart', function(event, next, current) {
			// 	if(!$rootScope.loggedUser) {
			// 		$location.path('/register');
			// 	}
			// });

			$rootScope.$on('$locationChangeStart', function(event, next, current) {
				console.log("Current: " + current);
				console.log("Next: " + next);
			});

			// $rootScope.$on('$locationChangeSuccess', function() {
			// 	$rootScope.actualLocation = $location.path();
			// });

			// $rootScope.$watch(function() { 
			// 	return $location.path() 
			// }, function(newLocation, oldLocation) {
			// 	if($rootScope.actualLocation == newLocation) {
			// 		$location.path('/register');
			// 	}
			// });
		})
		.run(function ($templateCache) {})
		.config(function(ngModalDefaultsProvider) {
			return ngModalDefaultsProvider.set({
		    	closeButtonHtml: "<i class='fa fa-times'></i>"
			});
		})
		.config(['growlProvider', function (growlProvider) {
			growlProvider.globalPosition('top-center');
		}])
		.directive("footable", function($timeout) {
		    return {
		        restrict: 'A',
		        link: function(scope, element, attrs){
		            element.footable(scope.$eval(attrs.footable));
		            $timeout(function(){
		               element.trigger('footable_redraw');
		            }, 100);
		        }
		    };
		})
		.factory('getLocalStorage', function() {    
	    });
// })();
(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('AnalyticsController', AnalyticsController);

    // AnalyticsController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'ApiService', 'HeaderService', 'growl', '$timeout'];

    /* @ngInject */
    function AnalyticsController($scope, $log, $location, $controller, $rootScope, ConfigService, ApiService, HeaderService, growl, $timeout, LoggingService) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        $scope.activeTab = 'usersInProgress';
        $scope.pgwidth = true;
        $scope.currentpage = 1;
        $scope.chartchange = '';
        
        $scope.logEvent = function() {
            LoggingService.postTrack('{analy,' + $scope.userid + ',' + $scope.chartchange + ',' + new Date().getTime() + '}');
        };
        
        $scope.hide = [
            { hideval: '' },
            { hideval: '' },
            { hideval: '' },
            { hideval: '' },
            { hideval: '' },
            { hideval: '' },
            { hideval: '' },
            { hideval: '' },
            { hideval: '' },
            { hideval: '' }
        ];

        $scope.fclick = function() {
            if($scope.currentpage !== 1) {
                $scope.currentpage = 1;
                $scope.moveon($scope.currentpage);
            }
        };

        $scope.lclick = function() {
            if($scope.currentpage !== 9) {
                $scope.currentpage = 9;
                $scope.moveon($scope.currentpage);
            }
        };

        $scope.nclick = function() {
            if($scope.currentpage !== 9) {
                $scope.currentpage++;
                $scope.moveon($scope.currentpage);
            }
        };

        $scope.pclick = function() {
            if($scope.currentpage !== 1) {
                $scope.currentpage--;
                $scope.moveon($scope.currentpage);
            }
        };

        $scope.recentexams = {};
        $scope.toprow = [];
        $scope.examscores = {};

        $scope.inAnalytics = function() {
            console.log('Now in the Analytics page!');
        };

        $scope.inAnalytics();

        $scope.closeme = function (val) {
            console.log("val is: " + val);
            $('#hideme' + val + '').hide("slow");
            $('#' + val + '').hide("slow");
        };

        $scope.moveon = function(val) {
            if($scope.pgwidth) {
                for(var e=0;e<9;e++) {
                    $scope.hide[e].hideval = 'hide';
                }
                if(val==1) { $scope.hide[0].hideval = ''; }
                if(val==2) { $scope.hide[1].hideval = ''; }
                if(val==3) { $scope.hide[2].hideval = ''; }
                if(val==4) { $scope.hide[3].hideval = ''; }
                if(val==5) { $scope.hide[4].hideval = ''; }
                if(val==6) { $scope.hide[5].hideval = ''; }
                if(val==7) { $scope.hide[6].hideval = ''; }
                if(val==8) { $scope.hide[7].hideval = ''; }
                if(val==9) { $scope.hide[8].hideval = ''; }
            }
        };

        $scope.subjmonth = [
            { code: "", name: "Month" },
            { code: "Jan", name: "Jan" },
            { code: "Feb", name: "Feb" },
            { code: "Mar", name: "Mar" },           
            { code: "Apr", name: "Apr" },
            { code: "May", name: "May" },
            { code: "Jun", name: "Jun" },
            { code: "Jul", name: "Jul" },
            { code: "Aug", name: "Aug" },
            { code: "Sep", name: "Sep" },
            { code: "Oct", name: "Oct" },
            { code: "Nov", name: "Nov" },
            { code: "Dec", name: "Dec" }
        ];

        $scope.subjnumber = [
            { code: "", name: "Top #" },
            { code: "t3", name: "Top 3" },
            { code: "t5", name: "Last 3" }
        ];

        $scope.subjlist = [
            { code: "", name: "Subject" },
            { code: "Phy", name: "Physics" },
            { code: "Chem", name: "Chemistry" },
            { code: "Maths", name: "Mathematics" },           
            { code: "Econ", name: "Economics" },
            { code: "Bio", name: "Biology" },
            { code: "Eng", name: "English" },
            { code: "Geo", name: "Geography" },
            { code: "Lit", name: "Lit. in English" },
            { code: "Com", name: "Commerce" },
            { code: "AgSci", name: "Agric Sci" },
            { code: "Gov", name: "Government" }
        ];

        $scope.subjyear = [
            { code: "", name: "Year" },
            { code: "1988", name: "1988" },
            { code: "1989", name: "1989" },
            { code: "1990", name: "1990" },           
            { code: "1991", name: "1991" },
            { code: "1992", name: "1992" },
            { code: "1993", name: "1993" },
            { code: "1994", name: "1994" },
            { code: "1995", name: "1995" },
            { code: "1996", name: "1996" },
            { code: "1997", name: "1997" },
            { code: "1998", name: "1998" },
            { code: "1999", name: "1999" },
            { code: "2000", name: "2000" },           
            { code: "2001", name: "2001" },
            { code: "2002", name: "2002" },
            { code: "2003", name: "2003" },
            { code: "2004", name: "2004" },
            { code: "2005", name: "2005" },
            { code: "2006", name: "2006" },
            { code: "2007", name: "2007" },
            { code: "2008", name: "2008" },
            { code: "2009", name: "2009" },
            { code: "2010", name: "2010" },           
            { code: "2011", name: "2011" },
            { code: "2012", name: "2012" },
            { code: "2013", name: "2013" },
            { code: "2014", name: "2014" },
            { code: "2015", name: "2015" }
        ];

        $scope.chart1Data = {};
        $scope.chart2Data = {};
        $scope.chart3Data = {};
        $scope.chart4Data = {};
        $scope.chart5Data = {};
        $scope.chart6Data = {};

        $scope.setChart1 = function() {
            $('#chart1').highcharts({
                chart: {
                    type: 'column'
                },
                title: {
                    text: 'Monthly Exam Completions'
                },
                xAxis: {
                    categories: ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],
                    crosshair: true
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: 'Exam Completions'
                    }
                },
                tooltip: {
                    headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                    pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                        '<td style="padding:0"><b>{point.y:.1f}</b></td></tr>',
                    footerFormat: '</table>',
                    shared: true,
                    useHTML: true
                },
                plotOptions: {
                    column: {
                        pointPadding: 0.1,
                        borderWidth: 0.2
                    }
                },
                series: [{
                    name: $scope.chart1Data.dataval,
                    data: $scope.chart1Data.data
                }]
            });
        };

        $scope.setChart2 = function() {
            $('#chart2').highcharts({
                chart: {
                    type: $scope.chart2Data.typee
                },
                title: {
                    text: $scope.chart2Data.titlee
                },
                subtitle: {
                    text: '<b>' + $scope.chart2Data.subtitle + '</b>'
                },
                xAxis: {
                    allowDecimals: false,
                    labels: {
                        formatter: function () {
                            return this.value; // clean, unformatted number for year
                        }
                    }
                },
                yAxis: {
                    title: {
                        text: $scope.chart2Data.data1ylabel
                    },
                    labels: {
                        formatter: function () {
                            return this.value ;
                        }
                    }
                },
                tooltip: {
                    pointFormat: '{series.name} scored <b>{point.y:,.0f}</b> points<br/>more than the average tester'
                },
                plotOptions: {
                    area: {
                        pointStart: 1988,
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            radius: 2,
                            states: {
                                hover: {
                                    enabled: true
                                }
                            }
                        }
                    }
                },
                series: [{
                    name: $scope.chart2Data.data1xlabel,
                    data: $scope.chart2Data.data1,
                    color: '#839192'
                }, {
                    name: $scope.chart2Data.data2xlabel,
                    data: $scope.chart2Data.data2,
                    color: '#A9DFBF'
                }]
            });
        };

        $scope.setChart3 = function() {
            $('#chart3').highcharts({
                chart: {
                    type: $scope.chart3Data.typee
                },
                title: {
                    text: $scope.chart3Data.titlee
                },
                subtitle: {
                    text: $scope.chart3Data.subtitle
                },
                xAxis: {
                    categories: $scope.chart3Data.data2xlabel
                },
                yAxis: {
                    title: {
                        text: $scope.chart3Data.data1ylabel
                    }
                },
                plotOptions: {
                    line: {
                        dataLabels: {
                            enabled: true
                        },
                        enableMouseTracking: false
                    }
                },
                series: [{
                    name: 'You',
                    data: $scope.chart3Data.data1,
                    color: '#85929E'
                }, {
                    name: 'Average User',
                    data: $scope.chart3Data.data2,
                    color: '#F8C471'
                }]
            });
        };           

        $scope.setChart4 = function() {
            $('#chart4').highcharts({
                chart: {
                    type: 'area'
                },
                title: {
                    text: 'Subjects Attempted Most In Last 1 Week'
                },
                xAxis: {
                    categories: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    tickmarkPlacement: 'on',
                    title: {
                        enabled: false
                    }
                },
                yAxis: {
                    title: {
                        text: 'Overall %'
                    }
                },
                tooltip: {
                    pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.percentage:.1f}%</b> ({point.y:,.0f} attempts)<br/>',
                    split: true
                },
                plotOptions: {
                    area: {
                        stacking: 'percent',
                        lineColor: '#ffffff',
                        lineWidth: 1,
                        marker: {
                            lineWidth: 1,
                            lineColor: '#ffffff'
                        }
                    }
                },
                series: [
                    {
                        name: $scope.chart4Data.datapts[0].dataval,
                        data: $scope.chart4Data.datapts[0].dataa,
                        color: '#FAD7A0'
                    },
                    {
                        name: $scope.chart4Data.datapts[1].dataval,
                        data: $scope.chart4Data.datapts[1].dataa,
                        color: '#7FB3D5'
                    },
                    {
                        name: $scope.chart4Data.datapts[2].dataval,
                        data: $scope.chart4Data.datapts[2].dataa,
                        color: '#707B7C'
                    }
                ]
            }); 
        };

        $scope.setChart5 = function() {
            $('#chart5').highcharts({
                chart: {
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: false,
                    type: 'pie'
                },
                title: {
                    text: 'Exam Attempts for Subject in Last 1 Month'
                },
                tooltip: {
                    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: false
                        },
                        showInLegend: true
                    }
                },
                series: [{
                    name: 'Total %',
                    colorByPoint: true,
                    data: [
                        {
                            name: 'Completed',//$scope.chart5Data[0].name,
                            y: $scope.chart5Data[0].y
                        }, 
                        {
                            name: 'Not Completed',//$scope.chart5Data[1].name,
                            y: $scope.chart5Data[1].y,
                            sliced: true,
                            selected: true
                        }
                    ]
                }]
            });
        };

        var categories = [' < 1996', '1996', '1997', '1998',
            '1999', '2000', '2001', '2002', '2003',
            '2004', '2005', '2006', '2007', '2008',
            '2009', '2010', '2011', '2012', '2013',
            '2014', '2015'];

        $scope.setChart6 = function() {
            $('#chart6').highcharts({
                chart: {
                    type: $scope.chart6Data.typee
                },
                title: {
                    text: $scope.chart6Data.titlee
                },
                subtitle: {
                    text: $scope.chart6Data.subtitle
                },
                xAxis: [
                    {
                        categories: categories,
                        reversed: false,
                        labels: {
                            step: 1
                        }
                    }, { // mirror axis on right side
                        opposite: true,
                        reversed: false,
                        categories: categories,
                        linkedTo: 0,
                        labels: {
                            step: 1
                        }
                    }
                ],
                yAxis: {
                    title: {
                        text: null
                    },
                    labels: {
                        formatter: function () {
                            return Math.abs(this.value) + '%';
                        }
                    }
                },
                plotOptions: {
                    series: {
                        stacking: 'normal'
                    }
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + ', year ' + this.point.category + '</b><br/>' +
                            'Score: ' + Highcharts.numberFormat(Math.abs(this.point.y), 0);
                    }
                },
                series: [{
                    name: $scope.chart6Data.data2xlabel,
                    data: $scope.chart6Data.data2,
                    color: '#273746'
                }, {
                    name: $scope.chart6Data.data1xlabel,
                    data: $scope.chart6Data.data1,
                    color: '#E74C3C'
                }]
            });
        };        

        $scope.getAnalyticsdata = function(userid) {
            ApiService.getAnalyticsdata(userid)
                .then(function successCallback(response) {
                    $log.debug('Getting the latest analytics data for user: 25526');
                    if(response.data != null) {
                        $log.debug('Analytics retrieval: ' + response.data.reason);
                        $scope.recentexams = response.data.recentexams;
                        $scope.toprow = response.data.toprow;
                        $scope.examscores = response.data.examscores;
                        $scope.chart1Data = response.data.chart1Data;
                        $scope.chart2Data = response.data.chart2Data;
                        $scope.chart3Data = response.data.chart3Data;
                        $scope.chart4Data = response.data.chart4Data;
                        $scope.chart5Data = response.data.chart5Data;
                        $scope.chart6Data = response.data.chart6Data;
                        $scope.setChart1();
                        $scope.setChart2();
                        $scope.setChart3();
                        $scope.setChart4();
                        $scope.setChart5();
                        $scope.setChart6();
                        $scope.chartchange = 'allcharts';
                        $scope.logEvent();
                    }
                }, function errorCallback(response) {
                    if (response.status != 200 && response.data === null) {
                        $log.error('Error occured, Analytics retrieval failed, data not saved!');
                        growl.error('Error occured, Analytics retrieval failed, data not saved!', { ttl: 3000 });
                    }
                });
        };

        $scope.getAnalyticsdata('12345');

        $scope.chart1Update = function() {
            var mth = $('#subjmth1').val();
            var yr = $('#subjyr2').val();
            var userid = $scope.userid;
            $log.debug('userid: ' + userid + ', mth: ' + mth + ', yr: ' + yr);
            $scope.chartchange = 'chart1';
            ApiService.chart1Update(mth, yr, userid)
                .then(function successCallback(response) {
                    $log.debug('Getting the latest chart 1 analytics data for user: 25526');
                    if(response.data != null) {
                        $log.debug('Analytics retrieval, done');
                        $scope.chart1Data = response.data.chart1Data;
                        $scope.setChart1();
                        growl.success('<b>Chart Updated Successfully</b>', { ttl: 3000 });
                        $scope.logEvent();
                    }
                }, function errorCallback(response) {
                    if (response.status != 200 && response.data === null) {
                        $log.error('Error occured, Chart1 Update failed');
                        growl.error('Error occured, Chart1 Update failed!', { ttl: 3000 });
                    }
                });
        };

        $scope.chart2Update = function() {
            var subj = $('#subjlst1').val();
            var yr = $('#subjyr1').val();
            var userid = $scope.userid;
            $log.debug('userid: ' + userid + ', subj: ' + subj + ', yr: ' + yr);
            $scope.chartchange = 'chart2';
            ApiService.chart2Update(subj, yr, userid)
                .then(function successCallback(response) {
                    $log.debug('Getting the latest chart 2 analytics data for user: 25526');
                    if(response.data != null) {
                        $log.debug('Analytics retrieval, done');
                        $scope.chart2Data = response.data.chart2Data;
                        $scope.setChart2();
                        growl.success('<b>Chart Updated Successfully</b>', { ttl: 3000 });
                        $scope.logEvent();
                    }
                }, function errorCallback(response) {
                    if (response.status != 200 && response.data === null) {
                        $log.error('Error occured, Chart2 Update failed');
                        growl.error('Error occured, Chart2 Update failed!', { ttl: 3000 });
                    }
                });
        };

        $scope.chart3Update = function() {
            var yr = $('#subjyr3').val();
            var userid = $scope.userid;
            $log.debug('userid: ' + userid + ', yr: ' + yr);
            $scope.chartchange = 'chart3';
            ApiService.chart3Update(yr, userid)
                .then(function successCallback(response) {
                    $log.debug('Getting the latest chart 3 analytics data for user: 25526');
                    if(response.data != null) {
                        $log.debug('Analytics retrieval, done ');
                        $scope.chart3Data = response.data.chart3Data;
                        $scope.setChart3();
                        growl.success('<b>Chart Updated Successfully</b>', { ttl: 3000 });
                        $scope.logEvent();
                    }
                }, function errorCallback(response) {
                    if (response.status != 200 && response.data === null) {
                        $log.error('Error occured, Chart3 Update failed');
                        growl.error('Error occured, Chart3 Update failed!', { ttl: 3000 });
                    }
                });
        };

        $scope.chart4Update = function() {
            var num = $('#subjnum').val();
            var userid = $scope.userid;
            $log.debug('userid: ' + userid + ', num: ' + num);
            $scope.chartchange = 'chart4';
            ApiService.chart4Update(num, userid)
                .then(function successCallback(response) {
                    $log.debug('Getting the latest chart 4 analytics data for user: 25526');
                    if(response.data != null) {
                        $log.debug('Analytics retrieval, done ');
                        $scope.chart4Data = response.data.chart4Data;
                        $scope.setChart4();
                        growl.success('<b>Chart Updated Successfully</b>', { ttl: 3000 });
                        $scope.logEvent();
                    }
                }, function errorCallback(response) {
                    if (response.status != 200 && response.data === null) {
                        $log.error('Error occured, Chart4 Update failed');
                        growl.error('Error occured, Chart4 Update failed!', { ttl: 3000 });
                    }
                });
        };

        $scope.chart5Update = function() {
            var subj = $('#subjlst2').val();
            var userid = $scope.userid;
            $log.debug('userid: ' + userid + ', subj: ' + subj);
            $scope.chartchange = 'chart5';
            ApiService.chart5Update(subj, userid)
                .then(function successCallback(response) {
                    $log.debug('Getting the latest chart 5 analytics data for user: 25526');
                    if(response.data != null) {
                        $log.debug('Analytics retrieval, done ');
                        $scope.chart5Data = response.data.chart5Data;
                        $scope.setChart5();
                        growl.success('<b>Chart Updated Successfully</b>', { ttl: 3000 });
                        $scope.logEvent();
                    }
                }, function errorCallback(response) {
                    if (response.status != 200 && response.data === null) {
                        $log.error('Error occured, Chart5 Update failed');
                        growl.error('Error occured, Chart5 Update failed!', { ttl: 3000 });
                    }
                });
        };

        $scope.chart6Update = function() {
            var subj = $('#subjlst3').val();
            var userid = $scope.userid;
            $log.debug('userid: ' + userid + ', subj: ' + subj);
            $scope.chartchange = 'chart6';
            ApiService.chart6Update(subj, userid)
                .then(function successCallback(response) {
                    $log.debug('Getting the latest chart 6 analytics data for user: 25526');
                    if(response.data != null) {
                        $log.debug('Analytics retrieval, done ');
                        $scope.chart6Data = response.data.chart6Data;
                        $scope.setChart6();
                        growl.success('<b>Chart Updated Successfully</b>', { ttl: 3000 });
                        $scope.logEvent();
                    }
                }, function errorCallback(response) {
                    if (response.status != 200 && response.data === null) {
                        $log.error('Error occured, Chart6 Update failed');
                        growl.error('Error occured, Chart6 Update failed!', { ttl: 3000 });
                    }
                });
        };

        $timeout(function(){
            $('div svg text:contains("Highcharts.com")').addClass('hide');

            if ($('body').width() < 600) {
              $scope.pgwidth = true;
              $scope.moveon(1);
            } else {
              HeaderService.setTab(2);
              $scope.pgwidth = false;
            }
            console.log('$scope.pgwidth is: ' + $scope.pgwidth);
        }, 500);

    }
})();
(function() {
	'use strict';

	angular
        .module('ssceexamsuiApp')
		.controller('BaseController', BaseController);

	// BaseController.$inject = ['$scope', '$timeout'];//, '$rootScope', 'ConfigService', 'window', $location];

	/* @ngInject */
	function BaseController($scope, $timeout, window, $location, $rootScope, TimerService) {
		// , ConfigService) {
        // if(!window.act) {
        //     $location.path('/');
        // }
        $rootScope.theAPI = 'http://192.168.1.144:8066';

		//ConfigService.setUrl('dev'); // sets the appropriate URL depending on the environment, dev, qa, or prod
		// ConfigService.setUserId();

	    // console.log('user is: ' + $rootScope.userId);
      $rootScope.userid = '12345';
	    
	    $scope.navbtns = [
            {
                title: 'First',
                icon: 'fa fa-fast-backward fa-1'
            },
            {
                title: 'Previous',
                icon: 'fa fa-step-backward fa-1'
            },
            {
                title: 'Next',
                icon: 'fa fa-step-forward fa-1'
            },
            {
                title: 'Last',
                icon: 'fa fa-fast-forward fa-1'
            },
            {
                title: 'Start',
                icon: 'fa fa-hourglass-start fa-1'
            },
            {
                title: 'Pause',
                icon: 'fa fa-pause fa-1'
            },
            {
                title: 'Continue',
                icon: 'fa fa-arrow-right fa-1'
            },
            {
                title: 'Save',
                icon: 'fa fa-cloud fa-1'
            },
            {
                title: 'Finish',
                icon: 'fa fa-stop fa-1'
            },
            {
                title: 'Test Center',
                icon: 'fa fa-gg fa-1'
            }
        ];

        $scope.countrylist = [
                  { ctry: "default", name: "Nigeria" },   
                  { ctry: "Afghanistan", name: "Afghanistan" },           
                  { ctry: "Albania", name: "Albania" },           
                  { ctry: "Algeria", name: "Algeria" },           
                  { ctry: "Andorra", name: "Andorra" },           
                  { ctry: "Angola", name: "Angola" },
                  { ctry: "Antigua", name: "Antigua" },
                  { ctry: "Argentina", name: "Argentina" },
                  { ctry: "Armenia", name: "Armenia" },
                  { ctry: "Australia", name: "Australia" },
                  { ctry: "Austria", name: "Austria" },
                  { ctry: "Azerbaijan", name: "Azerbaijan" },
                  { ctry: "Bahamas", name: "Bahamas" },
                  { ctry: "Bahrain", name: "Bahrain" },
                  { ctry: "Bangladesh", name: "Bangladesh" },
                  { ctry: "Barbados", name: "Barbados" },
                  { ctry: "Belarus", name: "Belarus" },
                  { ctry: "Belgium", name: "Belgium" },
                  { ctry: "Belize", name: "Belize" },
                  { ctry: "Benin", name: "Benin" },
                  { ctry: "Bhutan", name: "Bhutan" },
                  { ctry: "Bolivia", name: "Bolivia" },
                  { ctry: "Bosnia Herzegovina", name: "Bosnia Herzegovina" },
                  { ctry: "Botswana", name: "Botswana" },
                  { ctry: "Brazil", name: "Brazil" },
                  { ctry: "Brunei", name: "Brunei" },
                  { ctry: "Bulgaria", name: "Bulgaria" },
                  { ctry: "Burkina", name: "Burkina" },
                  { ctry: "Burundi", name: "Burundi" },
                  { ctry: "Cambodia", name: "Cambodia" },
                  { ctry: "Cameroon", name: "Cameroon" },
                  { ctry: "Canada", name: "Canada" },
                  { ctry: "Cape Verde", name: "Cape Verde" },
                  { ctry: "Central African Rep", name: "Central African Rep" },
                  { ctry: "Chad", name: "Chad" },
                  { ctry: "Chile", name: "Chile" },
                  { ctry: "China", name: "China" },
                  { ctry: "Colombia", name: "Colombia" },
                  { ctry: "Comoros", name: "Comoros" },
                  { ctry: "Congo", name: "Congo" },
                  { ctry: "Congo (Democratic Rep)", name: "Congo (Democratic Rep)" },
                  { ctry: "Costa Rica", name: "Costa Rica" },
                  { ctry: "Croatia", name: "Croatia" },
                  { ctry: "Cuba", name: "Cuba" },
                  { ctry: "Cyprus", name: "Cyprus" },
                  { ctry: "Czech Republic", name: "Czech Republic" },
                  { ctry: "Denmark", name: "Denmark" },
                  { ctry: "Djibouti", name: "Djibouti" },
                  { ctry: "Dominica", name: "Dominica" },
                  { ctry: "Dominican Republic", name: "Dominican Republic" },
                  { ctry: "East Timor", name: "East Timor" },
                  { ctry: "Ecuador", name: "Ecuador" },
                  { ctry: "Egypt", name: "Egypt" },
                  { ctry: "El Salvador", name: "El Salvador" },
                  { ctry: "Equatorial Guinea", name: "Equatorial Guinea" },
                  { ctry: "Eritrea", name: "Eritrea" },
                  { ctry: "Estonia", name: "Estonia" },
                  { ctry: "Ethiopia", name: "Ethiopia" },
                  { ctry: "Fiji", name: "Fiji" },
                  { ctry: "Finland", name: "Finland" },
                  { ctry: "France", name: "France" },
                  { ctry: "Gabon", name: "Gabon" },
                  { ctry: "Gambia", name: "Gambia" },
                  { ctry: "Georgia", name: "Georgia" },
                  { ctry: "Germany", name: "Germany" },
                  { ctry: "Ghana", name: "Ghana" },
                  { ctry: "Greece", name: "Greece" },
                  { ctry: "Grenada", name: "Grenada" },
                  { ctry: "Guatemala", name: "Guatemala" },
                  { ctry: "Guinea", name: "Guinea" },
                  { ctry: "Guinea-Bissau", name: "Guinea-Bissau" },
                  { ctry: "Guyana", name: "Guyana" },
                  { ctry: "Haiti", name: "Haiti" },
                  { ctry: "Honduras", name: "Honduras" },
                  { ctry: "Hungary", name: "Hungary" },
                  { ctry: "Iceland", name: "Iceland" },
                  { ctry: "India", name: "India" },
                  { ctry: "Indonesia", name: "Indonesia" },
                  { ctry: "Iran", name: "Iran" },
                  { ctry: "Iraq", name: "Iraq" },
                  { ctry: "Ireland (Republic)", name: "Ireland (Republic)" },
                  { ctry: "Israel", name: "Israel" },
                  { ctry: "Italy", name: "Italy" },
                  { ctry: "Ivory Coast", name: "Ivory Coast" },
                  { ctry: "Jamaica", name: "Jamaica" },
                  { ctry: "Japan", name: "Japan" },
                  { ctry: "Jordan", name: "Jordan" },
                  { ctry: "Kazakhstan", name: "Kazakhstan" },
                  { ctry: "Kenya", name: "Kenya" },
                  { ctry: "Kiribati", name: "Kiribati" },
                  { ctry: "Korea North", name: "Korea North" },
                  { ctry: "Korea South", name: "Korea South" },
                  { ctry: "Kosovo", name: "Kosovo" },
                  { ctry: "Kuwait", name: "Kuwait" },
                  { ctry: "Kyrgyzstan", name: "Kyrgyzstan" },
                  { ctry: "Laos", name: "Laos" },
                  { ctry: "Latvia", name: "Latvia" },
                  { ctry: "Lebanon", name: "Lebanon" },
                  { ctry: "Lesotho", name: "Lesotho" },
                  { ctry: "Liberia", name: "Liberia" },
                  { ctry: "Libya", name: "Libya" },
                  { ctry: "Liechtenstein", name: "Liechtenstein" },
                  { ctry: "Lithuania", name: "Lithuania" },
                  { ctry: "Luxembourg", name: "Luxembourg" },
                  { ctry: "Macedonia", name: "Macedonia" },
                  { ctry: "Madagascar", name: "Madagascar" },
                  { ctry: "Malawi", name: "Malawi" },
                  { ctry: "Malaysia", name: "Malaysia" },
                  { ctry: "Maldives", name: "Maldives" },
                  { ctry: "Mali", name: "Mali" },
                  { ctry: "Malta", name: "Malta" },
                  { ctry: "Marshall Islands", name: "Marshall Islands" },
                  { ctry: "Mauritania", name: "Mauritania" },
                  { ctry: "Mauritius", name: "Mauritius" },
                  { ctry: "Mexico", name: "Mexico" },
                  { ctry: "Micronesia", name: "Micronesia" },
                  { ctry: "Moldova", name: "Moldova" },
                  { ctry: "Monaco", name: "Monaco" },
                  { ctry: "Mongolia", name: "Mongolia" },
                  { ctry: "Montenegro", name: "Montenegro" },
                  { ctry: "Morocco", name: "Morocco" },
                  { ctry: "Mozambique", name: "Mozambique" },
                  { ctry: "Myanmar (Burma)", name: "Myanmar (Burma)" },
                  { ctry: "Namibia", name: "Namibia" },
                  { ctry: "Nauru", name: "Nauru" },
                  { ctry: "Nepal", name: "Nepal" },
                  { ctry: "Netherlands", name: "Netherlands" },
                  { ctry: "New Zealand", name: "New Zealand" },
                  { ctry: "Nicaragua", name: "Nicaragua" },
                  { ctry: "Niger", name: "Niger" },
                  { ctry: "Nigeria", name: "Nigeria" },
                  { ctry: "Norway", name: "Norway" },
                  { ctry: "Oman", name: "Oman" },
                  { ctry: "Pakistan", name: "Pakistan" },
                  { ctry: "Palau", name: "Palau" },
                  { ctry: "Panama", name: "Panama" },
                  { ctry: "Papua New Guinea", name: "Papua New Guinea" },
                  { ctry: "Paraguay", name: "Paraguay" },
                  { ctry: "Peru", name: "Peru" },
                  { ctry: "Philippines", name: "Philippines" },
                  { ctry: "Poland", name: "Poland" },
                  { ctry: "Portugal", name: "Portugal" },
                  { ctry: "Qatar", name: "Qatar" },
                  { ctry: "Romania", name: "Romania" },
                  { ctry: "Russian Federation", name: "Russian Federation" },
                  { ctry: "Rwanda", name: "Rwanda" },
                  { ctry: "St Kitts &amp; Nevis", name: "St Kitts &amp; Nevis" },
                  { ctry: "St Lucia", name: "St Lucia" },
                  { ctry: "Saint Vincent &amp; the Grenadines", name: "Saint Vincent &amp; the Grenadines" },
                  { ctry: "Samoa", name: "Samoa" },
                  { ctry: "San Marino", name: "San Marino" },
                  { ctry: "Sao Tome &amp; Principe", name: "Sao Tome &amp; Principe" },
                  { ctry: "Saudi Arabia", name: "Saudi Arabia" },
                  { ctry: "Senegal", name: "Senegal" },
                  { ctry: "Serbia", name: "Serbia" },
                  { ctry: "Seychelles", name: "Seychelles" },
                  { ctry: "Sierra Leone", name: "Sierra Leone" },
                  { ctry: "Singapore", name: "Singapore" },
                  { ctry: "Slovakia", name: "Slovakia" },
                  { ctry: "Slovenia", name: "Slovenia" },
                  { ctry: "Solomon Islands", name: "Solomon Islands" },
                  { ctry: "Somalia", name: "Somalia" },
                  { ctry: "South Africa", name: "South Africa" },
                  { ctry: "South Sudan", name: "South Sudan" },
                  { ctry: "Spain", name: "Spain" },
                  { ctry: "Sri Lanka", name: "Sri Lanka" },
                  { ctry: "Sudan", name: "Sudan" },
                  { ctry: "Suriname", name: "Suriname" },
                  { ctry: "Swaziland", name: "Swaziland" },
                  { ctry: "Sweden", name: "Sweden" },
                  { ctry: "Switzerland", name: "Switzerland" },
                  { ctry: "Syria", name: "Syria" },
                  { ctry: "Taiwan", name: "Taiwan" },
                  { ctry: "Tajikistan", name: "Tajikistan" },
                  { ctry: "Tanzania", name: "Tanzania" },
                  { ctry: "Thailand", name: "Thailand" },
                  { ctry: "Togo", name: "Togo" },
                  { ctry: "Tonga", name: "Tonga" },
                  { ctry: "Trinidad &amp; Tobago", name: "Trinidad &amp; Tobago" },
                  { ctry: "Tunisia", name: "Tunisia" },
                  { ctry: "Turkey", name: "Turkey" },
                  { ctry: "Turkmenistan", name: "Turkmenistan" },
                  { ctry: "Tuvalu", name: "Tuvalu" },
                  { ctry: "Uganda", name: "Uganda" },
                  { ctry: "Ukraine", name: "Ukraine" },
                  { ctry: "United Arab Emirates", name: "United Arab Emirates" },
                  { ctry: "United Kingdom", name: "United Kingdom" },
                  { ctry: "United States", name: "United States" },
                  { ctry: "Uruguay", name: "Uruguay" },
                  { ctry: "Uzbekistan", name: "Uzbekistan" },
                  { ctry: "Vanuatu", name: "Vanuatu" },
                  { ctry: "Vatican City", name: "Vatican City" },
                  { ctry: "Venezuela", name: "Venezuela" },
                  { ctry: "Vietnam", name: "Vietnam" },
                  { ctry: "Yemen", name: "Yemen" },
                  { ctry: "Zambia", name: "Zambia" },
                  { ctry: "Zimbabwe", name: "Zimbabwe" }
            ];

        $scope.setScores = function(val, subj) {
            console.log('subj is: ' + subj);
            // if(window.sessionStorage.econB) {
            //     console.log('window.sessionStorage.econB is: ' + window.sessionStorage.econB);
            //     var old = window.sessionStorage.econB;
            //     window.sessionStorage.econB = old + "," + val;

            //     if ((window.sessionStorage.econB.split('}{')).length > 4) {
            //         console.log("Sending this to the external Tracking Data Ingestor service = " + (window.sessionStorage.econB.split('}{')).length + ".");
            //         ingestLogs(window.sessionStorage.econB);
            //         window.sessionStorage.econB = "x";
            //     }
            // } else {
            //     window.sessionStorage.econB = val;
            // }
        };

        $scope.btnclick = function(val) {
            //console.log('btn clicked is: ' + $scope.btnsList[val]);
            console.log('You clicked: ' + $scope.btnsList[val]);
            if($scope.btnsList[val]=='Next'){
                $scope.getNext();
            } else if($scope.btnsList[val]=='Previous'){
                $scope.getPrev();
            } else if($scope.btnsList[val]=='First'){
                $scope.getFirst();
            } else if($scope.btnsList[val]=='Last'){
                $scope.getLast();
            } else if($scope.btnsList[val]=='Pause'){
                $scope.lefttime = TimerService.getTime($scope.oldtime, $scope.totaltimemins)[1];
                console.log('$scope.lefttime is: ' + $scope.lefttime);
                console.log('Pause time is: ');
                $scope.oldtime = new Date().getTime();
                $scope.timerStopped = true;
            } else if($scope.btnsList[val]=='Continue'){
                $scope.timerStopped = false; // unfreeze the Timer
                $scope.timegone = TimerService.gettime(0, window.sessionStorage.tmlft)[0];
                $scope.timeleft = TimerService.gettime(0, window.sessionStorage.tmlft)[1];
                $scope.pctgone = TimerService.gettime(0, window.sessionStorage.tmlft)[2];
                // $scope.timeleft = TimerService.getResult(TimerService.getTimeSets()[1]);                
                console.log('$scope.timegone is: ' + $scope.timegone);
                console.log('$scope.timeleft is: ' + $scope.timeleft);
                console.log('$scope.pctgone is: ' + $scope.pctgone);
                $scope.oldtime = 0;
            } else if($scope.btnsList[val]=='Save'){
                $scope.getSave();
            } else if($scope.btnsList[val]=='Test Center'){
                $location.path($scope.baseRoute + '/testcenter');
            } else if($scope.btnsList[val]=='Finish') {
                $scope.timerStopped = true; // freeze the Timer from counting before showing the Finish modal
                $scope.toggleModal(1);
            }
            // 
            if(!$scope.timerStopped) {
                $scope.timegoneleft = TimerService.getTime($scope.oldtime, $scope.totaltimemins);
                $scope.timegone = $scope.timegoneleft[0];
                $scope.timeleft = $scope.timegoneleft[1];
                $scope.pctused = ($scope.timegoneleft[2] > 100 ? 100 : $scope.timegoneleft[2]);
            }
        };

	    $scope.aval = 'yes';
	    
	    $scope.getDate = function() {
	        var dte = Date();
	        return dte;
	    };

		$scope.footable = function() {
			$('.footable').footable();
		};

		$scope.footable();

		$timeout(function() {
			$('.footable').trigger('footable_redraw');
			if(window.sessionStorage.act) {
		    	$('#logouttab').removeClass('hide');
		    	$('#logintab').addClass('hide');
		    } else {
		    	$location.path("/");
		    	$('#logintab').removeClass('hide');
		    	$('#logouttab').addClass('hide');
		    }
		}, 50);
        
	}
})();

(function() {
      'use strict';

      angular
        .module('ssceexamsuiApp')
        .controller('ContactController', ContactController);

      // ContactController.$inject = ['$scope', '$log', '$controller', '$rootScope', 'ConfigService', 'ApiService', 'growl', '$location', '$timeout', 'HeaderService'];

      /* @ngInject */
      function ContactController($scope, $log, $controller, $rootScope, ConfigService, ApiService, growl, $location, $timeout, HeaderService, LoggingService) {

            $controller('BaseController', {$scope: $scope});
            $rootScope.baseRoute = '';
            var baseRoute = '';
            $scope.logEvent = function() {
                  LoggingService.postTrack('{cntct,' + $scope.userid + ',' + new Date().getTime() + '}');
            };

            $scope.inContactUs = function() {
                  console.log('Now in the Contact Us page!');
                  $scope.logEvent();
            };

            $scope.inContactUs();

            $scope.sendForm = function() {
                  $log.info('Sending form details to server');
                  var msg = {
                        fname: $('#fname').val(),
                        lname: $('#lname').val(),
                        email: $('#email').val(),
                        phone: $('#phone').val(),
                        cname: $('#cname').val(),
                        country: $('#country').val(),
                        jtitle: $('#jtitle').val(),
                        note: $('#note').val()
                  };
                  console.log('msg is: ');
                  console.log(msg);
                  $scope.sendContactInfo(msg);
            };

            $scope.clearForm = function() {
                  $('#fname').val('');
                  $('#lname').val('');
                  $('#email').val('');
                  $('#phone').val('');
                  $('#cname').val('');
                  $('#country>option:eq(0)').prop('selected', true);
                  $('#jtitle').val('');
                  $('#note').val('');            
            };

            $timeout(function(){
                 HeaderService.setTab(4);
            }, 100);

            $scope.sendContactInfo = function(msg) {
                  ApiService.sendContactInfo(msg)
                        .then(function(response) {
                                console.log('Sending the contact us form details: ');
                                console.log(response);
                                console.log(response.data);
                                if(response.data) {
                                    console.log('call successful.');
                                    growl.info('Form submitted succesfully, we will contact you soon. Thanks.', { ttl: 3000 });
                                    $scope.clearForm();
                                }
                            }, function(error) {
                                console.log('error', error);
                                growl.error('Error: Form submission failed!', { ttl: 3000 });
                            }
                        );
            };
      };     
})();

(function() {
	'use strict';

	angular
        .module('ssceexamsuiApp')
		.controller('ErrorPageController', ErrorPageController);

		// ErrorPageController.$inject = ['$scope', '$location', '$controller'];
		
	    /* @ngInject */
	    function ErrorPageController($scope, $location, $controller){
	       $controller('BaseController', {$scope: $scope});

	       $scope.goback = function() {
            $location.path("/dashboard");
        };
	    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('JambtemplateController', JambtemplateController);

    // JambtemplateController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'growl', '$timeout'];

    /* @ngInject */
    function JambtemplateController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, growl, $timeout) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';

        $scope.inSynthetics = function() {
            console.log('Now in the Synthetics page!');
        };

        $scope.inSynthetics();

        $timeout(function(){
           HeaderService.setTab(3);
        }, 100);
    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('LandingController', LandingController);

    // LandingController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'growl', '$timeout'];

    /* @ngInject */
    function LandingController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, growl, $timeout) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        var baseRoute = '';
        $scope.pgwidth = true;

        console.log('page width is: ' + $('body').width());

        $scope.testcenter = function() {
            console.log('Testcenter link clicked!');
            $location.path(baseRoute + 'testcenter');
        };

        $scope.analytics = function() {
            console.log('Analytics link clicked!');
            $location.path(baseRoute + 'analytics');
        };

        $scope.profile = function() {
            console.log('Profile link clicked!');
            $location.path(baseRoute + 'profile');
        };

        $scope.loginclick = function() {
            console.log('Log in link clicked!');
            $location.path(baseRoute);
        };

        $scope.signupclick = function() {
            console.log('Sign up link clicked!');
            $location.path(baseRoute + 'signup');
        };

        $scope.getTheUsers = function() {
            ApiService.getUsers();
        };

        $scope.getTheUser = function() {
            // ApiService.newUser();
            // ApiService.getUserById('58916a76e896b98a8de3fa71');
            // ApiService.getUserByUnameAndPwd('Yemisi', 'yemisipwd');
            // ApiService.putUser('58916a75e896b98a8de3fa70', 'Adetunji');
            ApiService.deleteUser('589f4415d686767952202e83');
        };

        $timeout(function(){
           HeaderService.setTab(0);
           if ($('body').width() < 600) {
              $scope.pgwidth = false;
            } else {
              $scope.pgwidth = true;
            }
        }, 100);
    }
})();
(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('ListCtrl', ListCtrl);

        // ListCtrl.$inject = ['$scope'];

        /* @ngInject */
        function ListCtrl($scope) {
            $scope.items = [
                {'id': 1, 'label': 'First', 'done': true},
                {'id': 2, 'label': 'Second', 'done': false}
            ];

            $scope.getDoneClass = function(item) {
                return {
                    'finished': item.done,
                    'unfinished': !item.done
                };
            };
        }
})();
(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('LoginController', LoginController);

    // LoginController.$inject = ['$scope', '$log', '$controller', '$rootScope', 'AuthService', 'growl', '$location', 'window'];

    /* @ngInject */
    function LoginController($scope, $log, $controller, $rootScope, $timeout, AuthService, ApiService, growl, $location, window) {

        $controller('BaseController', {$scope: $scope});

        $scope.title = "Login to SSCEexams";

        // implement pre-paid coupon code for specific durationlogin functionality

        $scope.username = '';
        $scope.pword = '';
        $rootScope.login = false;
        window.sessionStorage.act = '';
        $rootScope.token = '';

        $scope.disabletray = function() {
            $('#righttray ul').addClass("hide");
        };

        $scope.thelogin = function() {
            $('#signupcard').addClass('hide');
            $('#logincard').removeClass('hide');
            $('#forgotcard').addClass('hide');

            $("#formUsername").removeClass('redborder');
            $("#formPassword").removeClass('redborder');               
        };

        $scope.thesignUp = function() {
            $('#signupcard').removeClass('hide');
            $('#logincard').addClass('hide');
            $('#forgotcard').addClass('hide');

            $("#arusername").removeClass('redborder');
            $("#aremail").removeClass('redborder');
            $("#arpword").removeClass('redborder');
            $("#arrpword").removeClass('redborder');
            
            $scope.rusername = '';
            $scope.remail = '';
            $scope.rpword = '';
            $scope.rrpword = '';                        
        };

        $scope.theforgot = function() {
            $('#signupcard').addClass('hide');
            $('#logincard').addClass('hide');
            $('#forgotcard').removeClass('hide'); 

            $("#fUsername").removeClass('redborder');
            $("#fEmailaddy").removeClass('redborder');

            $scope.fpusername = '';
            $scope.fpemail = '';
        };

        $scope.gotoLogin = function() {
            $scope.thelogin();
        };

        $scope.loginFail = function(cmmt) {
            $scope.userlogin = cmmt;
            $("#loginfail").removeClass("hide");
            $timeout(function(){
                $("#loginfail").addClass("hide");
            }, 5000);
        };

        $scope.fpwordFail = function(cmmt) {
            $scope.userforgot = cmmt;
            $("#forgotfail").removeClass("hide");
            $timeout(function(){
                $("#forgotfail").addClass("hide");
            }, 5000);
        };

        $scope.sendForgot = function() {
            if(($scope.fpusername == '') || ($scope.fpemail == '')) {
                $scope.fpwordFail('Username and Email are both Required!');
            } else if(!$scope.isEmail($scope.fpemail)) {
                $scope.fpwordFail('Enter a Valid Email!');
            } else {
                $scope.userForgotPassword();
            }
        };

        $scope.userLogin = function() {
            if(($scope.username == '') || ($scope.pword == '')) {
                $scope.loginFail('Username and Password Required to Log in!');
            } else if(($scope.username) && ($scope.pword)) {
                AuthService.postLoginForm({
                    uname: $scope.username, 
                    pwd: $scope.pword
                }).then(function(response) {
                    console.log('The Api response is: ');
                    console.log(response);
                    if(response.success) {
                        console.log('User Authenticated successfully.');
                        $rootScope.token = response.token;
                        if(!window.sessionStorage.act) { window.sessionStorage.act = response.token; }
                        if(!window.localStorage.act) { window.localStorage.act = response.token; }
                        $rootScope.login = true;
                        // var baseRoute = '';
                        // $location.path(baseRoute + 'dashboard');
                        $location.path('dashboard');
                        // $('#righttray ul').removeClass("hide");
                    }
                }, function(error) {
                    $scope.loginFail('Invalid User Parameters!');
                    if(($scope.username == 'bawo') && ($scope.pword == 'oyowe')){
                        var dtoken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6InRlc3QiLCJ1c2VyUHdkIjoiJDJhJDEyJGd6N01XU1VpQmdxSDVYemtiaEFnLmVqa1gxMTRRNy9iYloxVG1iRm5zQnpZSVNGZUV1ZE9LIiwiaWF0IjoxNDg4MTUxNTQ1LCJleHAiOjE0ODk2NTE1NDV9.IGF9IwOmNYSPAjOSBb2UmkC0VUC0k9reZh9clGK9vzY";
                        $rootScope.token = dtoken;
                        window.sessionStorage.act = dtoken;
                        window.localStorage.act = dtoken;
                        $location.path('dashboard');
                    }
                });
            } else {
                $scope.loginFail('Log In Failed!');
                // growl.error('Error: Invalid User Parameters!', { ttl: 3000 });
                // $('#righttray ul').addClass("hide");
            }
        };

        $scope.isEmail = function(email) {
          var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
          return regex.test(email);
        };

        $scope.regFail = function(cmmt) {
            $scope.userreg = cmmt;//'Registration failed, Username Already Exists!';
            $("#regfail").removeClass("hide");
            $timeout(function(){
                $("#regfail").addClass("hide");
            }, 5000);
        };

        $scope.regPass = function() {
            $scope.userreg = 'Registration succeeded, Log In to proceed!';
            $("#regfail").removeClass("hide");
            $timeout(function(){
                $("#regfail").addClass("hide");
            }, 5000);
        };

        $scope.fpwdFail = function() {
            $scope.userforgot = 'Password Recovery Failed, Please Try Again!';
            $("#forgotfail").removeClass("hide");
            $timeout(function(){
                $("#forgotfail").addClass("hide");
            }, 5000);
        };

        $scope.fpwdPass = function() {
            $scope.userforgot = 'Password Recovery succeeded, Check your Email!';
            $("#forgotfail").removeClass("hide");
            $timeout(function(){
                $("#forgotfail").addClass("hide");
            }, 5000);
        };

        $scope.userRegister = function() {
            console.log('userRegister clicked with '); 
            
            if($scope.rusername == '') {
                $("#arusername").addClass('redborder');
                $scope.regFail('Username is Required!');
            } else if(!$scope.isEmail($scope.remail)) {
                $("#aremail").addClass('redborder'); 
                $scope.regFail('Email not Valid!');
            } else if(($scope.rpword == '') || ($scope.rrpword == '')) {
                console.log('Passwords Required to Register!');
                $(".ppword").addClass('redborder');
                $scope.regFail('Passwords Required to Register!');
            } else if($scope.rpword != $scope.rrpword) {
                console.log('Please confirm your password!');
                $(".ppword").addClass('redborder'); 
                $scope.regFail('Please confirm your password!');
            } else {
                console.log('Username: ' + $scope.rusername);       
                console.log('Email: ' + $scope.remail);       
                console.log('Password: ' + $scope.rpword); 
                ApiService.registerUser({
                    uname: $scope.rusername,
                    email: $scope.remail,
                    pword: $scope.rpword
                });
                $scope.regFail('User Registration failed, Try Again!');
                // $scope.regPass();
            }      
        };

        $scope.userForgotPassword = function() {
            console.log('userForgotPassword clicked with '); 
            console.log('Username: ' + $scope.fpusername);       
            console.log('Email: ' + $scope.fpemail);    
            ApiService.forgotpwdUser({
                uname: $scope.fpusername,
                email: $scope.fpemail
            });
            // $scope.fpwdFail();
            $scope.fpwdPass();
        };

        $scope.checkTxts = function() {
            if($scope.rpword === $scope.rrpword) {
                $(".ppword").removeClass('redborder'); 
            } else{
                $(".ppword").addClass('redborder');
            }
        };

        $scope.checkEml = function() {
            if(!$scope.isEmail($scope.remail)) {
                $("#aremail").addClass('redborder'); 
            } else {
                $("#aremail").removeClass('redborder'); 
            }
        };

        $scope.checkUname = function() {
            if($scope.rusername == '') {
                $("#arusername").addClass('redborder');
            } else {
                $("#arusername").removeClass('redborder'); 
            }
        };

        $('#arusername').on('keyup',function(e){
            $scope.checkUname();
        });

        $('#aremail').on('keyup',function(e){
            // console.log('Email is: ' + $scope.remail); 
            $scope.checkEml();
        });

        $('#arrpword').on('keyup',function(e){
            // console.log('Password 2: ' + $scope.rrpword); 
            $scope.checkTxts();
        });

        $('#arpword').on('keyup',function(e){
            // console.log('Password 1: ' + $scope.rpword); 
            $scope.checkTxts();
        });

        $scope.userForgot = function() {
            console.log('userForgot clicked with ');
        };

        $scope.loginUser = function(u, p) {
            // send the username and password to the DB to check if this user is registered
            return AuthService.postLoginForm({
                uname: u, 
                pwd: p
            });
        };

        $scope.signupUser = function(u, p) {
            // send the username and password to the DB to check if this user is registered
            return AuthService.postLoginForm({
                uname: u, 
                pwd: p
            });
        };

        $scope.disabletray();          
    }
})();

(function() {
  'use strict';

  angular
    .module('ssceexamsuiApp')
    .controller('PasswordController', PasswordController);

  // PasswordController.$inject = ['$scope'];

  /* @ngInject */
  function PasswordController($scope) {

    $scope.password = '';
    $scope.strength = '';

    $scope.grade = function() {
      var size = $scope.password.length;
      if (size > 8) {
        $scope.strength = 'strong';
      } else if (size > 3) {
        $scope.strength = 'medium';
      } else {
        $scope.strength = 'weak';
      }
    };
        
  }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('PricingController', PricingController);

    // PricingController.$inject = ['$scope', '$log', '$controller', '$rootScope', 'ConfigService', 'ApiService', 'growl', '$location', '$timeout', 'HeaderService'];

    /* @ngInject */
    function PricingController($scope, $log, $controller, $rootScope, ConfigService, ApiService, growl, $location, $timeout, HeaderService) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        var baseRoute = '';

        $scope.inTestcenter = function() {
            console.log('Now in the Pricing page!');
        };

        $scope.inTestcenter();

        $timeout(function(){
           HeaderService.setTab(5);
        }, 100);

        $scope.gotoExam = function(subj, url) {
            $rootScope.currentSubject = subj;
            console.log('Sscetemplate link for ' + subj + ' clicked!');
            console.log('baseRoute + url is: ' + baseRoute + url);
            $location.path(baseRoute + url);
        };

        $scope.pricehref = function(val) {
            $log.info('User subscription clicked: ' + val);
            $location.path(baseRoute + '/signup');
        };

        $scope.modaltxt = {
            free: {
                txt: 'Already Free!',
                perks: 'Offers 3 Examinations years from 1988 to 1990',
                note: 'Free after Joining SSCEexams',
                clr: 'ccc'
            },
            standard: {
                txt: 'Confirm Standard Upgrade',
                perks: 'Offers 12 Examinations years from 1988 to 1999',
                note: 'CODE is STANDARD1',
                clr: '2ab27b'
            },
            premium: {
                txt: 'Confirm Premium Upgrade',
                perks: 'Offers All 28 Examinations years from 1988 to 2015',
                note: 'CODE is PREMIUM2',
                clr: 'f6b63f'
            },
            school: {
                txt: 'Request School Upgrade',
                perks: 'Offers Examinations years based on school subscription',
                note: 'Please contact your School administartor for the School issued CODE',
                clr: '5D6D7E'
            },
            inst: 'Check your email for payment instructions within the next 24 hours.'
        };

        $scope.themodal = {
            modalShown: false
        };

        $scope.toggleModal = function(val) {
            console.log('$scope.toggleModal called, val is: ' + val);
            if(val == 'standardprice') {
                $scope.mtxt = $scope.modaltxt.standard;
            } else if(val == 'premiumprice') {
                $scope.mtxt = $scope.modaltxt.premium;
            } else if(val == 'schoolprice') {
                $scope.mtxt = $scope.modaltxt.school;
            } else {
                $scope.mtxt = $scope.modaltxt.free;
            }
            $scope.themodal.modalShown = !$scope.themodal.modalShown;
            // $scope.logscope();
        };

        $scope.confirmUpgrade = function(val) {
            if(val !== 'Already Free!'){
                console.log('Upgrade Selected is: ' + val);
                ApiService.confirmUpgrade($rootScope.userid, val);
            }
        };

        $scope.examsubjects = [
          {
            name: 'Free',
            btnval: 'Free at Sign up',
            href: 'freeprice',
            price: 'N0',
            btncolor: "btn-free",
            notes: 'Practice a limited number of real examinations questions covering any 6 subjects over 2 years, view your study progress and see analytics to showing how well you are progressing in your preparations.',
            side: 'Free for students as part of the SSCE examinations Student Preparatory Pack program',
            icn: 'fa fa-users fa-lg'
          },
          {
            name: 'Standard',
            btnval: 'Upgrade to standard',
            href: 'standardprice',
            price: 'N1000',
            btncolor: "btn-standard",
            notes: 'Practice real examinations questions spanning a period of 10 years over all 13 major subjects, view your study progress and see comprehensive analytics showing how well you are progressing in preparations.',
            side: 'This package allows you access to standard student metrics generator and a basic analytics dashboard',
            icn: 'fa fa-bar-chart fa-lg'
          },
          {
            name: 'Premium',
            btnval: 'Upgrade to premium',
            href: 'premiumprice',
            price: 'N2500',
            btncolor: "btn-premium",
            notes: 'Practice real examinations questions spanning a period of 28 years over all 13 major subjects, view your study progress, see and generate comprehensive analytics and progress reports showing how well you are progressing.',
            side: 'This package includes the metrics generator and a comprehensive, 360 degree analytics dashboard',
            icn: 'fa fa-tachometer fa-lg'
          },
          {
            name: 'School',
            btnval: 'Start a free School trial',
            href: 'schoolprice',
            price: 'N500',
            btncolor: "btn-school",
            notes: 'As a member of your school subscription, you can practice all available 28 years of real examinations over all 13 major subjects. View your progress reports and allow your instructors see how well you are preparing and which areas you might need some extra help.',
            side: 'Sold to School organizations in packs of 50 student seats and billed annually',
            icn: 'fa fa-graduation-cap fa-lg'
          }
        ];
    }

     
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('ProfileController', ProfileController);

    // ProfileController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'growl', '$timeout', 'window'];

    /* @ngInject */
    function ProfileController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, growl, $timeout, window, LoggingService) {

        $controller('BaseController', {$scope: $scope});
        $scope.logEvent = function() {
            LoggingService.postTrack('{synth,' + $scope.userid + ',' + new Date().getTime() + '}');
        };

        $rootScope.baseRoute = '';

        $scope.inProfile = function() {
            console.log('Now in the Profile page!');
            $scope.logEvent();
        };

        $scope.inProfile();

        $scope.username = 'xebitstudios';
        $scope.city_state = 'Egbeda, Lagos';
        $scope.fname_lname = 'Omobola Aderonye';
        $scope.street_address = '256 Kamuri Olasogo Street';
        $scope.country = 'Nigeria';
        $scope.user_tel = '8034567893';
        $scope.user_email = 'xebitstudios@yahoo.com';

        $scope.editProfile = function() {
            console.log('editProfile clicked!');
            $('.profile').prop('disabled', false);
        };

        $('.profile').prop('disabled', true);

        $scope.setProfile = function() {
            $scope.fname = $('#tfname').val();
            $scope.lname = $('#tlname').val();
            $scope.straddy = $('#tstraddy').val();
            $scope.city = $('#tcity').val();
            $scope.state = $('#tstate').val();
            $scope.country = $('#tcountry').val();
            $scope.tel = $('#tphone').val();
            $scope.email = $('#temail').val();
            $scope.about = $('#tnote').val();

            $scope.schnameaddy = $('#ytschname').val();
            $scope.schcity = $('#ytcity').val();
            $scope.schstate = $('#ytstate').val();
            $scope.schcountry = $('#ytcountry').val();
            $scope.schcontact = $('#tschcontct').val();
            $scope.schcontactphone = $('#ytphone').val();
            $scope.schphone = $('#ytschphone').val();            
            $scope.schemail = $('#ytemail').val();
            $scope.schabout = $('#ynote').val();
        };

        $scope.userprofile = {
            user: {
                fname: $scope.fname,
                lname: $scope.lname,
                straddy: $scope.straddy,
                city: $scope.city,
                state: $scope.state,
                country: $scope.country,
                tel: $scope.tel,
                email: $scope.email,
                about: $scope.about
            },
            sch: {
                schnameaddy: $scope.schnameaddy,
                schcity: $scope.schcity,
                schstate: $scope.schstate,
                schcountry: $scope.schcountry,
                schcontact: $scope.schcontact,
                schphone: $scope.schphone,
                schemail: $scope.schemail,
                schabout: $scope.schabout
            }
        };

        $scope.editUserProfile = function() {
            ApiService.editUserProfile({
                userid: $scope.userid,
                userdetails: $scope.userprofile.user
            });
        };

        $scope.editUserSchoolProfile = function() {
            ApiService.editUserSchoolProfile({
                userid: $scope.userid,
                schdetails: $scope.userprofile.sch
            });
        };

        $timeout(function(){
           HeaderService.setTab(3);
        }, 400);

    }
})();
(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('RegisterSchoolController', RegisterSchoolController);

    // RegisterSchoolController.$inject = ['$scope', '$log', '$controller', '$rootScope', 'ConfigService', 'ApiService', 'growl', '$location'];

    /* @ngInject */
    function RegisterSchoolController($scope, $log, $controller, $rootScope, $timeout, ConfigService, ApiService, HeaderService, growl, $location) {

        $controller('BaseController', {$scope: $scope});

        $scope.title = "Register your School to SSCEexams";

        $scope.schRegShow = function(cmmt) {
            $scope.schregval = cmmt;
            $("#schregval").removeClass("hide");
            $timeout(function(){
                $("#schregval").addClass("hide");
            }, 5000);
        };

        $scope.registernewschool = function() {
            console.log('$scope.schname is: ' + $scope.schname);
            console.log('$scope.schooladdy is: ' + $scope.schooladdy); 
            console.log('$scope.schuname is: ' + $scope.schuname);
            console.log('$scope.schpwd is: ' + $scope.schpwd); 
            console.log('$scope.schctperson is: ' + $scope.schctperson);
            console.log('$scope.schemail is: ' + $scope.schemail); 
            console.log('$scope.schctphone is: ' + $scope.schctphone);
            console.log('$scope.schadd is: ' + $scope.schadd);
            console.log($('#prek').is(':checked'));
            console.log($('#kdgrt').is(':checked'));
            console.log($('#nandp').is(':checked'));
            console.log($('#secon').is(':checked'));
            console.log($('#tert').is(':checked'));
            console.log($('#schfree').is(':checked'));
            console.log($('#schbasic').is(':checked'));
            console.log($('#schprm').is(':checked'));

            console.log('Register form submitted!');
            ApiService.registerSchool({
                schname: $scope.schname,
                schooladdy: $scope.schooladdy,
                schuname: $scope.schuname,
                schpwd: $scope.schpwd,
                schctperson: $scope.schctperson,
                schemail: $scope.schemail,
                schctphone: $scope.schctphone,
                schadd: $scope.schadd,
                prek: $('#prek').is(':checked'),
                kdgrt: $('#kdgrt').is(':checked'),
                nandp: $('#nandp').is(':checked'),
                secon: $('#secon').is(':checked'),
                tert: $('#tert').is(':checked'),
                schfree: $('#schfree').is(':checked'),
                schbasic: $('#schbasic').is(':checked'),
                schprm: $('#schprm').is(':checked')
            }).then(function(response) {
                if(response.success) {
                    console.log('Application Submitted Successfully, We will Contact You Soon.');
                    $scope.schRegShow('Application Submitted Successfully, We will Contact You Soon.');
                    // $location.path('dashboard');
                }
            }, function(error) {
                $scope.schRegShow('School Application Failed, Please Try Again!');
            });
        };

        $timeout(function(){
            HeaderService.setTab(6);
        }, 300);
    }

     
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('SignupController', SignupController);

    // SignupController.$inject = ['$scope', '$log', '$controller', '$rootScope', 'ConfigService', 'ApiService', 'growl', '$location'];

    /* @ngInject */
    function SignupController($scope, $log, $controller, $rootScope, ConfigService, ApiService, growl, $location) {

        $controller('BaseController', {$scope: $scope});
        var baseRoute = '';

        $scope.title = "Signup to SSCEexams";

        $scope.registerschoolclick = function() {
            console.log('Register School link clicked!');
            $location.path(baseRoute + 'registersch');
        };

        $scope.registernewuser = function() {
            $log.info('Sending new user details to server');
            var userdetails = {
                susr: $('#susr').val(),
                semail: $('#semail').val(),
                spwd: $('#spwd').val(),
                sspwd: $('#sspwd').val()
             };
            console.log('userdetails is: ');
            console.log(userdetails);
            $scope.registerNewUser(userdetails);
        };

        $scope.registerNewUser = function(userdetails) {
            ApiService.registerUser(userdetails)
                .then(function(response) {
                        console.log('Sending the new user form details: ');
                        console.log(response);
                        console.log(response.data);
                        if(response.data) {
                            console.log('User created successfully.');
                            growl.info('New user form submitted successfully, you can now proceed to login. Thanks.', { ttl: 3000 });
                            $location.path(baseRoute);
                        }
                    }, function(error) {
                        console.log('error', error);
                        growl.error('Error: Form submission failed!', { ttl: 3000 });
                        $location.path(baseRoute);
                    }
                );
            };
    }

     
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('SsceagricscibtemplateController', SsceagricscibtemplateController);

    // SsceagricscibtemplateController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'TimerService', 'growl', '$timeout'];

    /* @ngInject */
    function SsceagricscibtemplateController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, TimerService, growl, $timeout, LoggingService) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        $scope.exmid = 'agricsci_B';
        $scope.logEvent = function() {
            LoggingService.postTrack('{' + $scope.exmid + ',' + $scope.userid + ',' + $scope.examyear + ',' + $scope.qqt.Qval + ',' + new Date().getTime() + '}');
        };

        $scope.intab = function() {
            console.log('Now in the SSCE AgricSci_B Template page!');
        };

        $scope.intab();

        $timeout(function(){
           HeaderService.setTab(1);
        }, 100);

        $scope.pctused = 0;
        $scope.totaltimemins = 20;
        $scope.timegone = '0 hrs 0 mins 0 secs';
        $scope.timeleft = ' hrs 20 mins 0 secs';
        $scope.activeNav = 'Start';
        $scope.oldtime = 0;
        $scope.lefttime = 0;
        $scope.examyear = $rootScope.agricsci_selected_year;

        $scope.getStartTime = function() {
            $scope.oldtime = new Date().getTime();
            console.log('start time is: ' + $scope.oldtime);
        };

        $scope.getStartTime();

        $scope.btnsList = _.pluck(_.values($scope.navbtns), 'title');
        
        $scope.qtt = {};

        $scope.qqt = {
            "Qval": 1,
            "Q": {
                "qs": "1. Which of the units of the following physical quantities are derived? I. Area II. Thrust III. Pressure IV. Mass ",
                "opts": {
                    "q0": "A. I, II, III and IV",
                    "q1": "B. I, II and III only",
                    "q2": "C. I, II and IV only",
                    "q3": "D. I, and III only",
                    "q4": "E. I and IV only"
                },
                "ans": "B"
            }
        };

        $scope.getNum = function() {
            return $scope.qqt.Qval;
        };

        $scope.setNum = function(val) {

            $scope.qqt.Qval = val;
        };

        $scope.clearImg = function() {
            $scope.qqt.Q.img = "";
        };

        $scope.getNext = function() {
            if((_.keys($scope.qtt).length > $scope.qqt.Qval)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) + 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                }
            }
            $scope.logEvent();
        };

        $scope.getPrev = function() {
            if(($scope.qqt.Qval > 1)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) - 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                }
            }
        };

        $scope.getFirst = function() {
            $scope.qqt.Qval = 1;
            $scope.qqt.Q = _.values($scope.qtt)[0];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            }
        };

        $scope.getLast = function() {
            $scope.qqt.Qval = _.keys($scope.qtt).length;
            $scope.qqt.Q = _.values($scope.qtt)[_.keys($scope.qtt).length - 1];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            }
        };

        $scope.getLetter = function(val, indx) {
            if(_.contains(val.split('img**'), 'xx*')) {
                return '-';
            } else if(_.contains(val.split('**'), 'img')) {
                if(indx == '0'){ return 'A'; }
                if(indx == '1'){ return 'B'; }
                if(indx == '2'){ return 'C'; }
                if(indx == '3'){ return 'D'; }
                if(indx == '4'){ return 'E'; }
                if(indx == '5'){ return 'F'; }
                if(indx == '6'){ return 'G'; }
                if(indx == '7'){ return 'H'; }
                if(indx == '8'){ return 'I'; }
                if(indx == '9'){ return 'J'; }
            }  else {
                return val;
            }
        };

        $scope.getImage = function(val) {
            if(_.contains(val.split('**'), 'img')) { return true; }
            return (_.contains(val.split('**'), 'img'));
        };

        $scope.checkImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '';
            } else {
                return val;
            }
        };

        $scope.showImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '/img/agricsci/' + val.slice(3,val.length).split('**')[1];
            }
            return '/img/agricsci/' + val.split('**')[1];
        };

        $scope.getImageLocation = function(val) {
            if(rr.split('**').length > 1) {
                return $scope.getImage("/img/agricsci/myimage.jpg");
            } else {
                return '';
            }
        };

        $scope.navclick = function(navtitle) {
            $scope.activeNav = navtitle;
        };

        console.log('$rootScope.agricsci_selected_year is A: ' + $rootScope.agricsci_selected_year);

        ApiService.getAgricSciSectionB($rootScope.agricsci_selected_year)
            .then(function(response) {
                    console.log('The Api.getAgricSciSectionB() response is: ');
                    console.log(response);
                    console.log(response.data);
                    if(response.data) {
                        console.log('call successful.');
                        $scope.qtt = response.data;

                        $scope.qqt.Qval = 1;
                        $scope.qqt.Q.qs = $scope.qtt.Q1.qs;
                        $scope.qqt.Q.opts = $scope.qtt.Q1.opts;
                        $scope.qqt.Q.ans = $scope.qtt.Q1.ans; 
                        
                        $scope.getFirst(); 
                    }
                }, function(error) {
                    console.log('error', error);
                    // growl.error('Error: Api.getAgricSciSectionB() failed!', { ttl: 3000 });
                }
            );
    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('SscebiologybtemplateController', SscebiologybtemplateController);

    // SscebiologybtemplateController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'TimerService', 'growl', '$timeout'];

    /* @ngInject */
    function SscebiologybtemplateController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, TimerService, growl, $timeout, LoggingService) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        $scope.exmid = 'bio_B';
        $scope.logEvent = function() {
            LoggingService.postTrack('{' + $scope.exmid + ',' + $scope.userid + ',' + $scope.examyear + ',' + $scope.qqt.Qval + ',' + new Date().getTime() + '}');
        };

        $scope.intab = function() {
            console.log('Now in the SSCE Biology_B Template page!');
        };

        $scope.intab();

        $timeout(function(){
           HeaderService.setTab(1);
        }, 100);

        $scope.pctused = 0;
        $scope.totaltimemins = 20;
        $scope.timegone = '0 hrs 0 mins 0 secs';
        $scope.timeleft = ' hrs 20 mins 0 secs';
        $scope.activeNav = 'Start';
        $scope.oldtime = 0;
        $scope.lefttime = 0;
        $scope.examyear = $rootScope.biology_selected_year;

        $scope.getStartTime = function() {
            $scope.oldtime = new Date().getTime();
            console.log('start time is: ' + $scope.oldtime);
        };

        $scope.getStartTime();

        $scope.btnsList = _.pluck(_.values($scope.navbtns), 'title');

        $scope.qtt = {};

        $scope.qqt = {
            "Qval": 1,
            "Q": {
                "qs": "1. Which of the units of the following physical quantities are derived? I. Area II. Thrust III. Pressure IV. Mass ",
                "opts": {
                    "q0": "A. I, II, III and IV",
                    "q1": "B. I, II and III only",
                    "q2": "C. I, II and IV only",
                    "q3": "D. I, and III only",
                    "q4": "E. I and IV only"
                },
                "ans": "B"
            }
        };

        $scope.getNum = function() {
            return $scope.qqt.Qval;
        };

        $scope.setNum = function(val) {

            $scope.qqt.Qval = val;
        };

        $scope.clearImg = function() {
            $scope.qqt.Q.img = "";
        };

        $scope.getNext = function() {
            if((_.keys($scope.qtt).length > $scope.qqt.Qval)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) + 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                }
            }
            $scope.logEvent();
        };

        $scope.getPrev = function() {
            if(($scope.qqt.Qval > 1)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) - 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                }
            }
        };

        $scope.getFirst = function() {
            $scope.qqt.Qval = 1;
            $scope.qqt.Q = _.values($scope.qtt)[0];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            }
        };

        $scope.getLast = function() {
            $scope.qqt.Qval = _.keys($scope.qtt).length;
            $scope.qqt.Q = _.values($scope.qtt)[_.keys($scope.qtt).length - 1];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            }
        };

        $scope.getLetter = function(val, indx) {
            if(_.contains(val.split('img**'), 'xx*')) {
                return '-';
            } else if(_.contains(val.split('**'), 'img')) {
                if(indx == '0'){ return 'A'; }
                if(indx == '1'){ return 'B'; }
                if(indx == '2'){ return 'C'; }
                if(indx == '3'){ return 'D'; }
                if(indx == '4'){ return 'E'; }
                if(indx == '5'){ return 'F'; }
                if(indx == '6'){ return 'G'; }
                if(indx == '7'){ return 'H'; }
                if(indx == '8'){ return 'I'; }
                if(indx == '9'){ return 'J'; }
            }  else {
                return val;
            }
        };

        $scope.getImage = function(val) {
            if(_.contains(val.split('**'), 'img')) { return true; }
            return (_.contains(val.split('**'), 'img'));
        };

        $scope.checkImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '';
            } else {
                return val;
            }
        };

        $scope.showImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '/img/biology/' + val.slice(3,val.length).split('**')[1];
            }
            return '/img/biology/' + val.split('**')[1];
        };

        $scope.getImageLocation = function(val) {
            if(rr.split('**').length > 1) {
                return $scope.getImage("/img/biology/myimage.jpg");
            } else {
                return '';
            }
        };

        $scope.navclick = function(navtitle) {
            $scope.activeNav = navtitle;
        };

        console.log('$rootScope.biology_selected_year is A: ' + $rootScope.biology_selected_year);

        ApiService.getBiologySectionB($rootScope.biology_selected_year)
            .then(function(response) {
                    console.log('The Api.getBiologySectionB() response is: ');
                    console.log(response);
                    console.log(response.data);
                    if(response.data) {
                        console.log('call successful.');
                        $scope.qtt = response.data;

                        $scope.qqt.Qval = 1;
                        $scope.qqt.Q.qs = $scope.qtt.Q1.qs;
                        $scope.qqt.Q.opts = $scope.qtt.Q1.opts;
                        $scope.qqt.Q.ans = $scope.qtt.Q1.ans; 
                        
                        $scope.getFirst(); 
                    }
                }, function(error) {
                    console.log('error', error);
                    // growl.error('Error: Api.getBiologySectionB() failed!', { ttl: 3000 });
                }
            );
    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('SscechemistrybtemplateController', SscechemistrybtemplateController);

    // SscechemistrybtemplateController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'TimerService', 'growl', '$timeout'];

    /* @ngInject */
    function SscechemistrybtemplateController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, TimerService, growl, $timeout, LoggingService) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        var baseRoute = '';
        $scope.exmid = 'chem_B';

        $scope.logEvent = function() {
            LoggingService.postTrack('{' + $scope.exmid + ',' + $scope.userid + ',' + $scope.examyear + ',' + $scope.qqt.Qval + ',' + new Date().getTime() + '}');
        };

        $scope.intab = function() {
            console.log('Now in the SSCE Chemistry_B Template page!');
        };

        $scope.intab();

        $timeout(function(){
           HeaderService.setTab(1);
        }, 100);

        $scope.pctused = 0;
        $scope.totaltimemins = 20;
        $scope.timegone = '0 hrs 0 mins 0 secs';
        $scope.timeleft = ' hrs 20 mins 0 secs';
        $scope.activeNav = 'Start';
        $scope.oldtime = 0;
        $scope.lefttime = 0;
        $scope.examyear = $rootScope.chemistry_selected_year;
        $scope.movedTime = false;

        $scope.themodal = {
            modalShown: false
        };
        $scope.passed = 0;
        $scope.wrong = 0;
        $scope.skipped = 0;

        $scope.toggleModal = function(val) {
            console.log('$scope.toggleModal called.');
            (val == 1) ? ($scope.themodal.modalShown = !$scope.themodal.modalShown) : (console.log('modal not selected!'));
            $scope.logscope();
        };

        $scope.logscope = function() {
            console.log('$scope.qtt is: ');
            console.log($scope.qtt);
        };

        $scope.gotoTC = function() {
            $scope.themodal.modalShown = false;
            $location.path(baseRoute + 'testcenter');
        };

        $scope.qstlength = function() {
            return _.keys($scope.qtt).length;
        };

        $scope.getpassed = function() {
            $scope.passed = 0;
            $scope.wrong = 0;
            $scope.skipped = 0;
            for(var i=0;i<_.keys($scope.qtt).length;i++) {
                if(_.values($scope.qtt)[i].sel == "") {
                    $scope.skipped = $scope.skipped + 1;
                } else if(_.values($scope.qtt)[i].ans == _.values($scope.qtt)[i].sel) {
                    $scope.passed = $scope.passed + 1;
                } else {
                    $scope.wrong = $scope.wrong + 1;
                }
            }
            return $scope.passed;
        };

        $scope.getpctscore = function() {
            return (($scope.passed/($scope.passed + $scope.wrong)) * 100).toFixed(2);
        };

        $scope.moveTime = function() {
            // $interval(function () {
            // $scope.updateTime();
            // }, 2000);
        };

        $scope.updateTime = function() {
            $scope.timegoneleft = TimerService.getTime($scope.oldtime, $scope.totaltimemins);
            $scope.timegone = $scope.timegoneleft[0];
            $scope.timeleft = $scope.timegoneleft[1];
            $scope.pctused = ($scope.timegoneleft[2] > 100 ? 100 : $scope.timegoneleft[2]);
            if(!$scope.movedTime) { 
                console.log('tick tock begins...');
                $scope.moveTime();
                $scope.movedTime = !$scope.movedTime;
            }
        };

        $scope.getStartTime = function() {
            $scope.oldtime = new Date().getTime();
            console.log('start time is: ' + $scope.oldtime);
        };

        $scope.getStartTime();

        $scope.currentqst = 1;

        $scope.btnsList = _.pluck(_.values($scope.navbtns), 'title');
        
        $scope.qtt = {};

        $scope.qqt = {
            "Qval": 1,
            "Q": {
                "qs": "1. Which of the units of the following physical quantities are derived? I. Area II. Thrust III. Pressure IV. Mass ",
                "opts": {
                    "q0": "A. I, II, III and IV",
                    "q1": "B. I, II and III only",
                    "q2": "C. I, II and IV only",
                    "q3": "D. I, and III only",
                    "q4": "E. I and IV only"
                },
                "ans": "B"
            }
        };

        $scope.getNum = function() {
            return $scope.qqt.Qval;
        };

        $scope.setNum = function(val) {
            $scope.qqt.Qval = val;
        };

        $scope.clearImg = function() {
            $scope.qqt.Q.img = "";
        };

        $scope.getNext = function() {
            if($scope.getNum() == 50) {
                $scope.toggleModal(1);
            } else {
                $scope.logscope();
                $scope.clearOptions($scope.getNum());
                if((_.keys($scope.qtt).length > $scope.qqt.Qval)) {
                    $scope.qqt.Qval = (parseInt($scope.qqt.Qval) + 1);
                    $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                    if(!$scope.qqt.Q.img) {
                        $scope.clearImg();
                    };
                    $scope.checkSel($scope.qqt.Q);
                }
            }
            $scope.logEvent();
        };

        $scope.getPrev = function() {
            $scope.logscope();
            $scope.clearOptions($scope.getNum());
            if(($scope.qqt.Qval > 1)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) - 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                };
                $scope.checkSel($scope.qqt.Q);
            }
        };

        $scope.getFirst = function() {
            $scope.logscope();
            $scope.clearOptions($scope.getNum());
            $scope.qqt.Qval = 1;
            $scope.qqt.Q = _.values($scope.qtt)[0];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
            $scope.checkSel($scope.qqt.Q);
        };

        $scope.getLast = function() {
            $scope.logscope();
            $scope.clearOptions($scope.getNum());
            $scope.qqt.Qval = _.keys($scope.qtt).length;
            $scope.qqt.Q = _.values($scope.qtt)[_.keys($scope.qtt).length - 1];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
            $scope.checkSel($scope.qqt.Q);
        };

        $scope.getLetter = function(val, indx) {
            if(_.contains(val.split('img**'), 'xx*')) {
                return '-';
            } else if(_.contains(val.split('**'), 'img')) {
                if(indx == '0'){ return 'A'; }
                if(indx == '1'){ return 'B'; }
                if(indx == '2'){ return 'C'; }
                if(indx == '3'){ return 'D'; }
                if(indx == '4'){ return 'E'; }
                if(indx == '5'){ return 'F'; }
                if(indx == '6'){ return 'G'; }
                if(indx == '7'){ return 'H'; }
                if(indx == '8'){ return 'I'; }
                if(indx == '9'){ return 'J'; }
            }  else {
                return val;
            }
        };

        $scope.getImage = function(val) {
            if(_.contains(val.split('**'), 'img')) { return true; };
            return (_.contains(val.split('**'), 'img'));
        };

        $scope.checkImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '';
            } else {
                return val;
            }
        };

        $scope.colorBorder = function(qst, opt, reslt) {
            if($rootScope.rtscore) {
                // remove all the border colors on all options
                $(".div_chem_" + qst + " p").removeClass('redborder');
                $(".div_chem_" + qst + " p").removeClass('greenborder');
                // now set the specific border on the option selected
                if(reslt==true) {
                    $("#div_chem_" + qst + "_" + opt + " p").addClass('greenborder');
                } else {
                    $("#div_chem_" + qst + "_" + opt + " p").addClass('redborder');
                }
            }
        };

        $scope.checkSel = function(val) {
            // console.log('The $scope.qqt.Q.sel is now: ' + $scope.qqt.Q.sel);
            if($scope.qqt.Q.sel != "") {
                console.log("checking the options...");
                if($scope.qqt.Q.sel == "A") { 
                    console.log("A...");
                    //$('#chem_4_1').prop('checked', 'checked');
                    $(".chems:eq(0) input").prop('checked', 'checked');
                    if($rootScope.rtscore) {
                        if($scope.qqt.Q.sel == $scope.qqt.Q.ans) {
                           $(".chems:eq(0)").addClass('greenborder'); 
                        } else {
                            $(".chems:eq(0)").addClass('redborder');
                        }
                    }
                    // $(".chems:eq(0)").addClass('greenborder');
                } else if($scope.qqt.Q.sel == "B") { 
                    console.log("B...");
                    $(".chems:eq(1) input").prop('checked', 'checked');
                    if($rootScope.rtscore) {
                        if($scope.qqt.Q.sel == $scope.qqt.Q.ans) {
                           $(".chems:eq(1)").addClass('greenborder'); 
                        } else {
                            $(".chems:eq(1)").addClass('redborder');
                        }
                    }
                } else if($scope.qqt.Q.sel == "C") { 
                    console.log("C...");
                    $(".chems:eq(2) input").prop('checked', 'checked');
                    if($rootScope.rtscore) {
                        if($scope.qqt.Q.sel == $scope.qqt.Q.ans) {
                           $(".chems:eq(2)").addClass('greenborder'); 
                        } else {
                            $(".chems:eq(2)").addClass('redborder');
                        }
                    }
                } else if($scope.qqt.Q.sel == "D") { 
                    console.log("D...");
                    $(".chems:eq(3) input").prop('checked', 'checked');
                    if($rootScope.rtscore) {
                        if($scope.qqt.Q.sel == $scope.qqt.Q.ans) {
                           $(".chems:eq(3)").addClass('greenborder'); 
                        } else {
                            $(".chems:eq(3)").addClass('redborder');
                        }
                    }
                } else if($scope.qqt.Q.sel == "E") { 
                    console.log("E...");
                    $(".chems:eq(4) input").prop('checked', 'checked');
                    if($rootScope.rtscore) {
                        if($scope.qqt.Q.sel == $scope.qqt.Q.ans) {
                           $(".chems:eq(4)").addClass('greenborder'); 
                        } else {
                            $(".chems:eq(4)").addClass('redborder');
                        }
                    }
                } else {}
            }
        };

        $scope.selClickedOption = function(val1, val2) {
            if(val2==0) { 
                console.log('checkbox A clicked!');
                $scope.qqt.Q.sel = 'A';
                if($scope.qqt.Q.ans == 'A') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            else if(val2==1) { 
                console.log('checkbox B clicked!');
                $scope.qqt.Q.sel = 'B';
                if($scope.qqt.Q.ans == 'B') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            else if(val2==2) { 
                console.log('checkbox C clicked!');
                $scope.qqt.Q.sel = 'C';
                if($scope.qqt.Q.ans == 'C') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            else if(val2==3) { 
                console.log('checkbox D clicked!');
                $scope.qqt.Q.sel = 'D';
                if($scope.qqt.Q.ans == 'D') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            else if(val2==4) { 
                console.log('checkbox E clicked!');
                $scope.qqt.Q.sel = 'E';
                if($scope.qqt.Q.ans == 'E') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            else {}
        };

    $scope.optClick = function(val1, val2) {
            console.log('element ID is: ' + 'chem' + "_" + val1 + "_" + val2);
            // $("#phy_1_2").prop("checked") = true;
            console.log('qst is: ' + val1 + ', opt is: ' + val2);
            $scope.selClickedOption(val1, val2);
            console.log('$scope.qqt.Q.sel is: ' + $scope.qqt.Q.sel);
        };

        // $scope.optClick = function(val1, val2) {
        //     console.log('element ID is: ' + 'chem' + "_" + val1 + "_" + val2);
        //     // $("#chem_1_2").prop("checked") = true
        //     console.log('qst is: ' + val1 + ', opt is: ' + val2);
        //     if(val2==0) { 
        //         console.log('checkbox A clicked!');
        //         if($scope.qqt.Q.ans == 'A') {
        //             $scope.colorBorder(val1, val2, true);
        //         } else {
        //             $scope.colorBorder(val1, val2, false);
        //         }
        //     }
        //     if(val2==1) { 
        //         console.log('checkbox B clicked!');
        //         if($scope.qqt.Q.ans == 'B') {
        //             $scope.colorBorder(val1, val2, true);
        //         } else {
        //             $scope.colorBorder(val1, val2, false);
        //         }
        //     }
        //     if(val2==2) { 
        //         console.log('checkbox C clicked!');
        //         if($scope.qqt.Q.ans == 'C') {
        //             $scope.colorBorder(val1, val2, true);
        //         } else {
        //             $scope.colorBorder(val1, val2, false);
        //         }
        //     }
        //     if(val2==3) { 
        //         console.log('checkbox D clicked!');
        //         if($scope.qqt.Q.ans == 'D') {
        //             $scope.colorBorder(val1, val2, true);
        //         } else {
        //             $scope.colorBorder(val1, val2, false);
        //         }
        //     }
        //     if(val2==4) { 
        //         console.log('checkbox E clicked!');
        //         if($scope.qqt.Q.ans == 'E') {
        //             $scope.colorBorder(val1, val2, true);
        //         } else {
        //             $scope.colorBorder(val1, val2, false);
        //         }
        //     }
        // };

        $scope.clearOptions = function(val) {
            console.log('$scope.getNum() is: ' + val);
            if($("#chem_" + val + "_0").prop("checked")) { $scope.seloption = '0'; $scope.setScores(val + "-0"); };
            if($("#chem_" + val + "_1").prop("checked")) { $scope.seloption = '1'; $scope.setScores(val + "-1"); };
            if($("#chem_" + val + "_2").prop("checked")) { $scope.seloption = '2'; $scope.setScores(val + "-2"); };
            if($("#chem_" + val + "_3").prop("checked")) { $scope.seloption = '3'; $scope.setScores(val + "-3"); };
            if($("#chem_" + val + "_4").prop("checked")) { $scope.seloption = '4'; $scope.setScores(val + "-4"); };

            $(".chem_" + val + "").prop("checked", false);
            $(".div_chem_" + val + " p").removeClass('redborder');
            $(".div_chem_" + val + " p").removeClass('greenborder');
            console.log('$scope.seloption is: ' + $scope.seloption);       
        };

        $scope.showImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '/img/chemistry/' + val.slice(3,val.length).split('**')[1];
            }
            return '/img/chemistry/' + val.split('**')[1];
        };

        $scope.getImageLocation = function(val) {
            if(rr.split('**').length > 1) {
                return $scope.getImage("/img/chemistry/myimage.jpg");
            } else {
                return '';
            }
        };

        $scope.navclick = function(navtitle) {
            $scope.activeNav = navtitle;
        };

        $scope.dresults = {
            correct: 0,
            wrong: 0,
            ishide: 'hide',
            hidebtn1: ''
        };

        $scope.seeresults = function() {
            console.log('$scope.seeresults clicked!');
            $scope.dresults.correct = 36;
            $scope.dresults.wrong = 24;
            $scope.dresults.ishide = '';
            $scope.hidebtn1 = 'hide';
            $scope.hidebtn2 = '';
            $scope.dskipped.ishide = 'hide';
        };

        $scope.viewskipped = function() {
            console.log('$scope.viewskipped clicked!');
            $scope.dskipped.ishide = '';
            $scope.dskipped.arry = [3, 14, 48];
            $scope.hidebtn1 = '';
            $scope.dresults.ishide = 'hide';
            $scope.hidebtn2 = 'hide';
        };

        $scope.dskipped = {
            ishide: 'hide',
            arry: []
        };
        
        $scope.restart = function() {
            console.log('$scope.restart clicked!');
        };

        console.log('$rootScope.chemistry_selected_year is A: ' + $rootScope.chemistry_selected_year);

        ApiService.getChemistrySectionB($rootScope.chemistry_selected_year)
            .then(function(response) {
                    console.log('The Api.getChemistrySectionB() response is: ');
                    console.log(response);
                    console.log(response.data);
                    if(response.data) {
                        console.log('call successful.');
                        $scope.qtt = response.data;

                        $scope.qqt.Qval = 1;
                        $scope.qqt.Q.qs = $scope.qtt.Q1.qs;
                        $scope.qqt.Q.opts = $scope.qtt.Q1.opts;
                        $scope.qqt.Q.ans = $scope.qtt.Q1.ans; 
                        
                        $scope.getFirst(); 
                    }
                }, function(error) {
                    console.log('error', error);
                    // growl.error('Error: Api.getChemistrySectionB() failed!', { ttl: 3000 });
                }
            );
    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('SscecommercebtemplateController', SscecommercebtemplateController);

    // SscecommercebtemplateController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'TimerService', 'growl', '$timeout'];

    /* @ngInject */
    function SscecommercebtemplateController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, TimerService, growl, $timeout, LoggingService) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        $scope.exmid = 'comm_B';
        $scope.logEvent = function() {
            LoggingService.postTrack('{' + $scope.exmid + ',' + $scope.userid + ',' + $scope.examyear + ',' + $scope.qqt.Qval + ',' + new Date().getTime() + '}');
        };

        $scope.intab = function() {
            console.log('Now in the SSCE Commerce_B Template page!');
        };

        $scope.intab();

        $timeout(function(){
           HeaderService.setTab(1);
        }, 100);

        $scope.pctused = 0;
        $scope.totaltimemins = 20;
        $scope.timegone = '0 hrs 0 mins 0 secs';
        $scope.timeleft = ' hrs 20 mins 0 secs';
        $scope.activeNav = 'Start';
        $scope.oldtime = 0;
        $scope.lefttime = 0;
        $scope.examyear = $rootScope.commerce_selected_year;

        $scope.getStartTime = function() {
            $scope.oldtime = new Date().getTime();
            console.log('start time is: ' + $scope.oldtime);
        };

        $scope.getStartTime();

        $scope.btnsList = _.pluck(_.values($scope.navbtns), 'title');

        $scope.qtt = {};

        $scope.qqt = {
            "Qval": 1,
            "Q": {
                "qs": "1. ",
                "opts": {
                    "q0": "A. ",
                    "q1": "B. ",
                    "q2": "C. ",
                    "q3": "D. ",
                    "q4": "E. "
                },
                "ans": "B"
            }
        };

        $scope.getNum = function() {
            return $scope.qqt.Qval;
        };

        $scope.setNum = function(val) {

            $scope.qqt.Qval = val;
        };

        $scope.clearImg = function() {
            $scope.qqt.Q.img = "";
        };

        $scope.getNext = function() {
            if((_.keys($scope.qtt).length > $scope.qqt.Qval)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) + 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                };
            }
            $scope.logEvent();
        };

        $scope.getPrev = function() {
            if(($scope.qqt.Qval > 1)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) - 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                };
            }
        };

        $scope.getFirst = function() {
            $scope.qqt.Qval = 1;
            $scope.qqt.Q = _.values($scope.qtt)[0];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
        };

        $scope.getLast = function() {
            $scope.qqt.Qval = _.keys($scope.qtt).length;
            $scope.qqt.Q = _.values($scope.qtt)[_.keys($scope.qtt).length - 1];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
        };

        $scope.getLetter = function(val, indx) {
            if(_.contains(val.split('img**'), 'xx*')) {
                return '-';
            } else if(_.contains(val.split('**'), 'img')) {
                if(indx == '0'){ return 'A'; }
                if(indx == '1'){ return 'B'; }
                if(indx == '2'){ return 'C'; }
                if(indx == '3'){ return 'D'; }
                if(indx == '4'){ return 'E'; }
                if(indx == '5'){ return 'F'; }
                if(indx == '6'){ return 'G'; }
                if(indx == '7'){ return 'H'; }
                if(indx == '8'){ return 'I'; }
                if(indx == '9'){ return 'J'; }
            }  else {
                return val;
            }
        };

        $scope.getImage = function(val) {
            if(_.contains(val.split('**'), 'img')) { return true; };
            return (_.contains(val.split('**'), 'img'));
        };

        $scope.checkImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '';
            } else {
                return val;
            }
        };

        $scope.showImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '/img/commerce/' + val.slice(3,val.length).split('**')[1];
            }
            return '/img/commerce/' + val.split('**')[1];
        };

        $scope.getImageLocation = function(val) {
            if(rr.split('**').length > 1) {
                return $scope.getImage("/img/commerce/myimage.jpg");
            } else {
                return '';
            }
        };

        $scope.navclick = function(navtitle) {
            $scope.activeNav = navtitle;
        };

        console.log('$rootScope.commerce_selected_year is A: ' + $rootScope.commerce_selected_year);

        ApiService.getCommerceSectionB($rootScope.commerce_selected_year)
            .then(function(response) {
                    console.log('The Api.getCommerceSectionB() response is: ');
                    console.log(response);
                    console.log(response.data);
                    if(response.data) {
                        console.log('call successful.');
                        $scope.qtt = response.data;

                        $scope.qqt.Qval = 1;
                        $scope.qqt.Q.qs = $scope.qtt.Q1.qs;
                        $scope.qqt.Q.opts = $scope.qtt.Q1.opts;
                        $scope.qqt.Q.ans = $scope.qtt.Q1.ans; 
                        
                        $scope.getFirst(); 
                    }
                }, function(error) {
                    console.log('error', error);
                    // growl.error('Error: Api.getcommerceSectionB() failed!', { ttl: 3000 });
                }
            );
    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('SsceeconomicsbtemplateController', SsceeconomicsbtemplateController);

    // SsceeconomicsbtemplateController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'TimerService', 'growl', '$timeout'];

    /* @ngInject */
    function SsceeconomicsbtemplateController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, TimerService, growl, $timeout, LoggingService, window) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        $scope.exmid = 'econ_B';
        $scope.seloption = '';

        $scope.intab = function() {
            console.log('Now in the SSCE Economics_B Template page!');
        };

        $scope.intab();

        $timeout(function(){
           HeaderService.setTab(1);
        }, 100);

        $scope.pctused = 0;
        $scope.totaltimemins = 20;
        $scope.timegone = '0 hrs 0 mins 0 secs';
        $scope.timeleft = ' hrs 20 mins 0 secs';
        $scope.activeNav = 'Start';
        $scope.oldtime = 0;
        $scope.lefttime = 0;
        $scope.examyear = $rootScope.economics_selected_year;

        $scope.logEvent = function() {
            LoggingService.postTrack('{' + 
                $scope.exmid + ',' + 
                $scope.userid + ',' + 
                $scope.examyear + ',' + 
                $scope.qqt.Qval + ',' + 
                $scope.seloption + ',' + 
                new Date().getTime() + 
                '}'
            );
        };

        $scope.getStartTime = function() {
            $scope.oldtime = new Date().getTime();
            console.log('start time is: ' + $scope.oldtime);
        };

        $scope.getStartTime();

        $scope.btnsList = _.pluck(_.values($scope.navbtns), 'title');

        $scope.qtt = {};

        $scope.qqt = {
            "Qval": 1,
            "Q": {
                "qs": "1. Which of the units of the following physical quantities are derived? I. Area II. Thrust III. Pressure IV. Mass ",
                "opts": {
                    "q0": "A. I, II, III and IV",
                    "q1": "B. I, II and III only",
                    "q2": "C. I, II and IV only",
                    "q3": "D. I, and III only",
                    "q4": "E. I and IV only"
                },
                "ans": "B"
            }
        };

        $scope.colorBorder = function(qst, opt, reslt) {
            if($rootScope.rtscore) {
                // remove all the border colors on all options
                $(".div_econ_" + qst + " p").removeClass('redborder');
                $(".div_econ_" + qst + " p").removeClass('greenborder');
                // now set the specific border on the option selected
                if(reslt==true) {
                    $("#div_econ_" + qst + "_" + opt + " p").addClass('greenborder');
                } else {
                    $("#div_econ_" + qst + "_" + opt + " p").addClass('redborder');
                }
            }
        };

        $scope.optClick = function(val1, val2) {
            // var ellm = val3 + "_" + val1 + "_" + val2;
            console.log('element ID is: ' + 'econ' + "_" + val1 + "_" + val2);
            // $("#econ_1_2").prop("checked") = true
            // $(".econ_1").length = 5
            console.log('qst is: ' + val1 + ', opt is: ' + val2);
            if(val2==0) { 
                console.log('checkbox A clicked!');
                if($scope.qqt.Q.ans == 'A') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            if(val2==1) { 
                console.log('checkbox B clicked!');
                if($scope.qqt.Q.ans == 'B') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            if(val2==2) { 
                console.log('checkbox C clicked!');
                if($scope.qqt.Q.ans == 'C') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            if(val2==3) { 
                console.log('checkbox D clicked!');
                if($scope.qqt.Q.ans == 'D') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            if(val2==4) { 
                console.log('checkbox E clicked!');
                if($scope.qqt.Q.ans == 'E') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
        };

        $scope.getNum = function() {
            return $scope.qqt.Qval;
        };

        $scope.setNum = function(val) {
            $scope.qqt.Qval = val;
        };

        $scope.clearImg = function() {
            $scope.qqt.Q.img = "";
        };

        $scope.clearOptions = function(val) {
            console.log('$scope.getNum() is: ' + val);
            if($("#econ_" + val + "_0").prop("checked")) { $scope.seloption = '0'; $scope.setScores(val + "-0"); };
            if($("#econ_" + val + "_1").prop("checked")) { $scope.seloption = '1'; $scope.setScores(val + "-1"); };
            if($("#econ_" + val + "_2").prop("checked")) { $scope.seloption = '2'; $scope.setScores(val + "-2"); };
            if($("#econ_" + val + "_3").prop("checked")) { $scope.seloption = '3'; $scope.setScores(val + "-3"); };
            if($("#econ_" + val + "_4").prop("checked")) { $scope.seloption = '4'; $scope.setScores(val + "-4"); };

            $(".econ_" + val + "").prop("checked", false);
            $(".div_econ_" + val + " p").removeClass('redborder');
            $(".div_econ_" + val + " p").removeClass('greenborder');
            console.log('$scope.seloption is: ' + $scope.seloption);       
        };

        $scope.getNext = function() {
            $scope.clearOptions($scope.getNum());
            if((_.keys($scope.qtt).length > $scope.qqt.Qval)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) + 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                };
            }
            $scope.logEvent();
        };

        $scope.getPrev = function() {
            if(($scope.qqt.Qval > 1)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) - 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                };
            }
        };

        $scope.getFirst = function() {
            $scope.qqt.Qval = 1;
            $scope.qqt.Q = _.values($scope.qtt)[0];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
        };

        $scope.getLast = function() {
            $scope.qqt.Qval = _.keys($scope.qtt).length;
            $scope.qqt.Q = _.values($scope.qtt)[_.keys($scope.qtt).length - 1];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
        };

        $scope.getLetter = function(val, indx) {
            if(_.contains(val.split('img**'), 'xx*')) {
                return '-';
            } else if(_.contains(val.split('**'), 'img')) {
                if(indx == '0'){ return 'A'; }
                if(indx == '1'){ return 'B'; }
                if(indx == '2'){ return 'C'; }
                if(indx == '3'){ return 'D'; }
                if(indx == '4'){ return 'E'; }
                if(indx == '5'){ return 'F'; }
                if(indx == '6'){ return 'G'; }
                if(indx == '7'){ return 'H'; }
                if(indx == '8'){ return 'I'; }
                if(indx == '9'){ return 'J'; }
            }  else {
                return val;
            }
        };

        $scope.getImage = function(val) {
            if(_.contains(val.split('**'), 'xx*img')) { return true; };
            return (_.contains(val.split('**'), 'img'));
        };

        $scope.checkImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '';
            } else {
                return val;
            }
        };

        $scope.showImage = function(val) {
            if(_.contains(val.split('**'), 'xx*img')) {
                return '/img/economics/' + val.slice(3,val.length).split('**')[1];
            }
            return '/img/economics/' + val.split('**')[1];
        };

        $scope.getImageLocation = function(val) {
            if(rr.split('**').length > 1) {
                return $scope.getImage("/img/economics/myimage.jpg");
            } else {
                return '';
            }
        };

        $scope.navclick = function(navtitle) {
            $scope.activeNav = navtitle;
        };

        console.log('$rootScope.economics_selected_year is A: ' + $rootScope.economics_selected_year);

        ApiService.getEconomicsSectionB($rootScope.economics_selected_year)
            .then(function(response) {
                    console.log('The Api.getEconomicsSectionB() response is: ');
                    console.log(response);
                    console.log(response.data);
                    if(response.data) {
                        console.log('call successful.');
                        $scope.qtt = response.data;

                        $scope.qqt.Qval = 1;
                        $scope.qqt.Q.qs = $scope.qtt.Q1.qs;
                        $scope.qqt.Q.opts = $scope.qtt.Q1.opts;
                        $scope.qqt.Q.ans = $scope.qtt.Q1.ans; 
                        
                        $scope.getFirst(); 
                    }
                }, function(error) {
                    console.log('error', error);
                    // growl.error('Error: Api.getEconomicsSectionB() failed!', { ttl: 3000 });
                }
            );
    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('SsceenglishbtemplateController', SsceenglishbtemplateController);

    // SsceenglishbtemplateController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'TimerService', 'growl', '$timeout'];

    /* @ngInject */
    function SsceenglishbtemplateController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, TimerService, growl, $timeout, LoggingService) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        $scope.exmid = 'eng_B';
        $scope.logEvent = function() {
            LoggingService.postTrack('{' + $scope.exmid + ',' + $scope.userid + ',' + $scope.examyear + ',' + $scope.qqt.Qval + ',' + new Date().getTime() + '}');
        };

        $scope.intab = function() {
            console.log('Now in the SSCE English_B Template page!');
        };

        $scope.intab();

        $timeout(function(){
           HeaderService.setTab(1);
        }, 100);

        $scope.pctused = 0;
        $scope.totaltimemins = 20;
        $scope.timegone = '0 hrs 0 mins 0 secs';
        $scope.timeleft = ' hrs 20 mins 0 secs';
        $scope.activeNav = 'Start';
        $scope.oldtime = 0;
        $scope.lefttime = 0;
        $scope.examyear = $rootScope.english_selected_year;
        $scope.qtlength = 0;

        $scope.getStartTime = function() {
            $scope.oldtime = new Date().getTime();
            console.log('start time is: ' + $scope.oldtime);
        };

        $scope.getStartTime();

        $scope.btnsList = _.pluck(_.values($scope.navbtns), 'title');

        $scope.getNum = function() {
            return $scope.qqt.Qval;
        };

        $scope.setNum = function(val) {
            $scope.qqt.Qval = val;
        };

        $scope.clearImg = function() {
            $scope.qqt.Q.img = "";
        };

        $scope.getNext = function() {
            if($scope.qtlength > $scope.sctn1PassaObjNum+1) {
                $scope.sctn1PassaObjNum = $scope.sctn1PassaObjNum + 1;
                $scope.setQst();
            } else {
                console.log('You have completed the questions in this section!');
            }
            $scope.logEvent();
        };

        $scope.getPrev = function() {
            if($scope.sctn1PassaObjNum > 0) {
                $scope.sctn1PassaObjNum = $scope.sctn1PassaObjNum - 1;
                $scope.setQst();
            } else {
                console.log('You have reached the first question in this section!');
            }
        };

        $scope.getFirst = function() {
            $scope.sctn1PassaObjNum = 0;
            $scope.setQst();
        };

        $scope.getLast = function() {
            $scope.sctn1PassaObjNum = $scope.qtlength - 1;
            $scope.setQst();
        };

        $scope.navclick = function(navtitle) {
            $scope.activeNav = navtitle;
        };

        console.log('$rootScope.english_selected_year is A: ' + $rootScope.english_selected_year);
        $scope.qtt = {};

        $scope.setToZero = function() {
            // console.log('$scope.qqt iss: ');
            // console.log($scope.qqt);
            $scope.sctn1PassaObjNum = 0;
            $scope.currentQst = 0;
            $scope.setQst();
        };
        $scope.dinstruction = 'Answer All questions in this section.';

        $scope.sectionclick = function(val) {
            $scope.sectionHeader = val;
            $scope.markChosen(val);
            // console.log('val is: ' + val);
            if(val == 'Section 1 - Passage A') {
                $scope.dinstruction = 'Answer All questions in this section.';
                $scope.qqt = {
                    "qstarray": $scope.qtt.S1.PA.qst,
                    "qstlist": _.omit($scope.qtt.S1.PA, 'qst')
                };
                $scope.qtlength = _.keys($scope.qqt.qstlist).length;
                $scope.setToZero();
            } else if(val == 'Section 1 - Passage B') {
                $scope.dinstruction = 'Answer All questions in this section.';
                $scope.qqt = {
                    "qstarray": $scope.qtt.S1.PB.qst,
                    "qstlist": _.omit($scope.qtt.S1.PB, 'qst')
                };
                $scope.qtlength = _.keys($scope.qqt.qstlist).length;
                $scope.setToZero();
            } else if(val == 'Section 2') {
                $scope.qqt = {
                    "qstarray": $scope.qtt.S2.headd,
                    "qstlist": _.omit($scope.qtt.S2, 'headd')
                };
                $scope.dinstruction = $scope.qqt.qstarray;
                $scope.qtlength = _.keys($scope.qqt.qstlist).length;
                $scope.setToZero();
            } else if(val == 'Section 3') {
                $scope.qqt = {
                    "qstarray": $scope.qtt.S3.headd,
                    "qstlist": _.omit($scope.qtt.S3, 'headd')
                };
                $scope.dinstruction = $scope.qqt.qstarray;
                $scope.qtlength = _.keys($scope.qqt.qstlist).length;
                $scope.setToZero();
            } else if(val == 'Section 4') {
                $scope.qqt = {
                    "qstarray": $scope.qtt.S4.headd,
                    "qstlist": _.omit($scope.qtt.S4, 'headd')
                };
                $scope.dinstruction = $scope.qqt.qstarray;
                $scope.qtlength = _.keys($scope.qqt.qstlist).length;
                $scope.setToZero();
            } else if(val == 'Section 5') {
                $scope.qqt = {
                    "qstarray": $scope.qtt.S5.headd,
                    "qstlist": _.omit($scope.qtt.S5, 'headd')
                };
                $scope.dinstruction = $scope.qqt.qstarray;
                $scope.qtlength = _.keys($scope.qqt.qstlist).length;
                $scope.setToZero();
            }
        };

        $scope.sectionHeader = 'Section 1 - Passage A';        
        // console.log('$scope.qtt is now: ');
        // console.log($scope.qtt);

        $scope.sectionslist = [
            {'val' : 'Section 1 - Passage A', 'ischosen': 'chosen'},
            {'val' : 'Section 1 - Passage B', 'ischosen': ''},
            {'val' : 'Section 2', 'ischosen': ''},
            {'val' : 'Section 3', 'ischosen': ''},
            {'val' : 'Section 4', 'ischosen': ''},
            {'val' : 'Section 5', 'ischosen': ''}
        ];

        $scope.markChosen = function(val) {
            for(var e=0;e<$scope.sectionslist.length;e++) {
                $scope.sectionslist[e].ischosen = '';
            }

            if(val == 'Section 1 - Passage A') {
                $scope.sectionslist[0].ischosen = 'chosen';
            } else if(val == 'Section 1 - Passage B') {
                $scope.sectionslist[1].ischosen = 'chosen';
            }
             else if(val == 'Section 2') {
                $scope.sectionslist[2].ischosen = 'chosen';
            }
             else if(val == 'Section 3') {
                $scope.sectionslist[3].ischosen = 'chosen';
            }
             else if(val == 'Section 4') {
                $scope.sectionslist[4].ischosen = 'chosen';
            }
             else if(val == 'Section 5') {
                $scope.sectionslist[5].ischosen = 'chosen';
            }
        };

        $scope.markChosen('Section 1 - Passage A');
        $scope.selectedSection = 0;
        $scope.sctn1PassaObjNum = 0;
        $scope.currentQst = 0;

        $scope.setQst = function() {
            $scope.sctn1PassaObj = _.pick($scope.qqt.qstlist, _.keys($scope.qqt.qstlist)[$scope.sctn1PassaObjNum]);
            $scope.sc1PsaQst = $scope.sctn1PassaObj[_.keys($scope.sctn1PassaObj)]; 
            $scope.currentQst = $scope.sctn1PassaObjNum + 1;
            $scope.qstkey = _.keys($scope.sctn1PassaObj)[0];
            $scope.qstvalue = (_.values($scope.sctn1PassaObj)[0]).qs;
        };

        ApiService.getEnglishSectionB($rootScope.english_selected_year)
            .then(function(response) {
                    console.log('The Api.getEnglishSectionB() response is: ');
                    console.log(response);
                    console.log(response.data);
                    if(response.data) {
                        console.log('call successful.');
                        $scope.qtt = response.data;
                        if($scope.selectedSection == 0) {
                            $scope.qqt = {
                                "qstarray": $scope.qtt.S1.PA.qst,
                                "qstlist": _.omit($scope.qtt.S1.PA, 'qst')
                            };
                        }

                        $scope.qtlength = _.keys($scope.qqt.qstlist).length;

                        $scope.setQst();
                        $scope.getFirst();
                    }
                }, function(error) {
                    console.log('error', error);
                    // growl.error('Error: Api.getEnglishSectionB() failed!', { ttl: 3000 });
                }
            );
    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('SscegeographybtemplateController', SscegeographybtemplateController);

    // SscegeographybtemplateController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'TimerService', 'growl', '$timeout'];

    /* @ngInject */
    function SscegeographybtemplateController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, TimerService, growl, $timeout, LoggingService) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        $scope.exmid = 'geo_B';
        $scope.logEvent = function() {
            LoggingService.postTrack('{' + $scope.exmid + ',' + $scope.userid + ',' + $scope.examyear + ',' + $scope.qqt.Qval + ',' + new Date().getTime() + '}');
        };

        $scope.intab = function() {
            console.log('Now in the SSCE Geography_B Template page!');
        };

        $scope.intab();

        $timeout(function(){
           HeaderService.setTab(1);
        }, 100);

        $scope.pctused = 0;
        $scope.totaltimemins = 20;
        $scope.timegone = '0 hrs 0 mins 0 secs';
        $scope.timeleft = ' hrs 20 mins 0 secs';
        $scope.activeNav = 'Start';
        $scope.oldtime = 0;
        $scope.lefttime = 0;
        $scope.examyear = $rootScope.geography_selected_year;

        $scope.getStartTime = function() {
            $scope.oldtime = new Date().getTime();
            console.log('start time is: ' + $scope.oldtime);
        };

        $scope.getStartTime();

        $scope.btnsList = _.pluck(_.values($scope.navbtns), 'title');

        $scope.qqt = {
            "Qval": 1,
            "Q": {
                "qs": "1. Which of the units of the following physical quantities are derived? I. Area II. Thrust III. Pressure IV. Mass ",
                "opts": {
                    "q0": "A. I, II, III and IV",
                    "q1": "B. I, II and III only",
                    "q2": "C. I, II and IV only",
                    "q3": "D. I, and III only",
                    "q4": "E. I and IV only"
                },
                "ans": "B"
            }
        };

        $scope.getNum = function() {
            return $scope.qqt.Qval;
        };

        $scope.setNum = function(val) {
            $scope.qqt.Qval = val;
        };

        $scope.clearImg = function() {
            $scope.qqt.Q.img = "";
        };

        $scope.getNext = function() {
            if((_.keys($scope.qtt).length > $scope.qqt.Qval)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) + 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                };
            }
            $scope.logEvent();
        };

        $scope.getPrev = function() {
            if(($scope.qqt.Qval > 1)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) - 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                };
            }
        };

        $scope.getFirst = function() {
            $scope.qqt.Qval = 1;
            $scope.qqt.Q = _.values($scope.qtt)[0];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
        };

        $scope.getLast = function() {
            $scope.qqt.Qval = _.keys($scope.qtt).length;
            $scope.qqt.Q = _.values($scope.qtt)[_.keys($scope.qtt).length - 1];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
        };

        $scope.getLetter = function(val, indx) {
            if(_.contains(val.split('img**'), 'xx*')) {
                return '-';
            } else if(_.contains(val.split('**'), 'img')) {
                if(indx == '0'){ return 'A'; }
                if(indx == '1'){ return 'B'; }
                if(indx == '2'){ return 'C'; }
                if(indx == '3'){ return 'D'; }
                if(indx == '4'){ return 'E'; }
                if(indx == '5'){ return 'F'; }
                if(indx == '6'){ return 'G'; }
                if(indx == '7'){ return 'H'; }
                if(indx == '8'){ return 'I'; }
                if(indx == '9'){ return 'J'; }
            }  else {
                return val;
            }
        };

        $scope.getImage = function(val) {
            if(_.contains(val.split('**'), 'img')) { return true; };
            return (_.contains(val.split('**'), 'img'));
        };

        $scope.checkImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '';
            } else {
                return val;
            }
        };

        $scope.showImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '/img/geography/' + val.slice(3,val.length).split('**')[1];
            }
            return '/img/geography/' + val.split('**')[1];
        };

        $scope.getImageLocation = function(val) {
            if(rr.split('**').length > 1) {
                return $scope.getImage("/img/geography/myimage.jpg");
            } else {
                return '';
            }
        };

        $scope.navclick = function(navtitle) {
            $scope.activeNav = navtitle;
        };

        console.log('$rootScope.geography_selected_year is A: ' + $rootScope.geography_selected_year);

        ApiService.getGeographySectionB($rootScope.geography_selected_year)
            .then(function(response) {
                    console.log('The Api.getGeographySectionB() response is: ');
                    console.log(response);
                    console.log(response.data);
                    if(response.data) {
                        console.log('call successful.');
                        $scope.qtt = response.data;

                        $scope.qqt.Qval = 1;
                        $scope.qqt.Q.qs = $scope.qtt.Q1.qs;
                        $scope.qqt.Q.opts = $scope.qtt.Q1.opts;
                        $scope.qqt.Q.ans = $scope.qtt.Q1.ans; 
                        
                        $scope.getFirst(); 
                    }
                }, function(error) {
                    console.log('error', error);
                    // growl.error('Error: Api.getGeographySectionB() failed!', { ttl: 3000 });
                }
            );    

    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('SscegovernmentbtemplateController', SscegovernmentbtemplateController);

    // SscegovernmentbtemplateController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'TimerService', 'growl', '$timeout'];

    /* @ngInject */
    function SscegovernmentbtemplateController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, TimerService, growl, $timeout, LoggingService) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        $scope.exmid = 'govt_B';
        $scope.logEvent = function() {
            LoggingService.postTrack('{' + $scope.exmid + ',' + $scope.userid + ',' + $scope.examyear + ',' + $scope.qqt.Qval + ',' + new Date().getTime() + '}');
        };

        $scope.intab = function() {
            console.log('Now in the SSCE Government_B Template page!');
        };

        $scope.intab();

        $timeout(function(){
           HeaderService.setTab(1);
        }, 100);

        $scope.pctused = 0;
        $scope.totaltimemins = 20;
        $scope.timegone = '0 hrs 0 mins 0 secs';
        $scope.timeleft = ' hrs 20 mins 0 secs';
        $scope.activeNav = 'Start';
        $scope.oldtime = 0;
        $scope.lefttime = 0;
        $scope.examyear = $rootScope.government_selected_year;

        $scope.getStartTime = function() {
            $scope.oldtime = new Date().getTime();
            console.log('start time is: ' + $scope.oldtime);
        };

        $scope.getStartTime();

        $scope.btnsList = _.pluck(_.values($scope.navbtns), 'title');

        $scope.qqt = {
            "Qval": 1,
            "Q": {
                "qs": "1. Which of the units of the following physical quantities are derived? I. Area II. Thrust III. Pressure IV. Mass ",
                "opts": {
                    "q0": "A. I, II, III and IV",
                    "q1": "B. I, II and III only",
                    "q2": "C. I, II and IV only",
                    "q3": "D. I, and III only",
                    "q4": "E. I and IV only"
                },
                "ans": "B"
            }
        };

        $scope.getNum = function() {
            return $scope.qqt.Qval;
        };

        $scope.setNum = function(val) {
            $scope.qqt.Qval = val;
        };

        $scope.clearImg = function() {
            $scope.qqt.Q.img = "";
        };

        $scope.getNext = function() {
            if((_.keys($scope.qtt).length > $scope.qqt.Qval)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) + 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                };
            }
            $scope.logEvent();
        };

        $scope.getPrev = function() {
            if(($scope.qqt.Qval > 1)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) - 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                };
            }
        };

        $scope.getFirst = function() {
            $scope.qqt.Qval = 1;
            $scope.qqt.Q = _.values($scope.qtt)[0];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
        };

        $scope.getLast = function() {
            $scope.qqt.Qval = _.keys($scope.qtt).length;
            $scope.qqt.Q = _.values($scope.qtt)[_.keys($scope.qtt).length - 1];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
        };

        $scope.getLetter = function(val, indx) {
            if(_.contains(val.split('img**'), 'xx*')) {
                return '-';
            } else if(_.contains(val.split('**'), 'img')) {
                if(indx == '0'){ return 'A'; }
                if(indx == '1'){ return 'B'; }
                if(indx == '2'){ return 'C'; }
                if(indx == '3'){ return 'D'; }
                if(indx == '4'){ return 'E'; }
                if(indx == '5'){ return 'F'; }
                if(indx == '6'){ return 'G'; }
                if(indx == '7'){ return 'H'; }
                if(indx == '8'){ return 'I'; }
                if(indx == '9'){ return 'J'; }
            }  else {
                return val;
            }
        };

        $scope.getImage = function(val) {
            if(_.contains(val.split('**'), 'xx*img')) { return true; };
            return (_.contains(val.split('**'), 'img'));
        };

        $scope.checkImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '';
            } else {
                return val;
            }
        };

        $scope.showImage = function(val) {
            if(_.contains(val.split('**'), 'xx*img')) {
                return '/img/government/' + val.slice(3,val.length).split('**')[1];
            }
            return '/img/government/' + val.split('**')[1];
        };

        $scope.getImageLocation = function(val) {
            if(rr.split('**').length > 1) {
                return $scope.getImage("/img/government/myimage.jpg");
            } else {
                return '';
            }
        };

        $scope.navclick = function(navtitle) {
            $scope.activeNav = navtitle;
        };

        console.log('$rootScope.government_selected_year is A: ' + $rootScope.government_selected_year);

        ApiService.getGovernmentSectionB($rootScope.government_selected_year)
            .then(function(response) {
                    console.log('The Api.getGovernmentSectionB() response is: ');
                    console.log(response);
                    console.log(response.data);
                    if(response.data) {
                        console.log('call successful.');
                        $scope.qtt = response.data;

                        $scope.qqt.Qval = 1;
                        $scope.qqt.Q.qs = $scope.qtt.Q1.qs;
                        $scope.qqt.Q.opts = $scope.qtt.Q1.opts;
                        $scope.qqt.Q.ans = $scope.qtt.Q1.ans; 
                        
                        $scope.getFirst(); 
                    }
                }, function(error) {
                    console.log('error', error);
                    // growl.error('Error: Api.getGovernmentSectionB() failed!', { ttl: 3000 });
                }
            );
    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('SscelitinengbtemplateController', SscelitinengbtemplateController);

    // SscelitinengbtemplateController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'TimerService', 'growl', '$timeout'];

    /* @ngInject */
    function SscelitinengbtemplateController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, TimerService, growl, $timeout, LoggingService) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        $scope.exmid = 'liteng_B';
        $scope.logEvent = function() {
            LoggingService.postTrack('{' + $scope.exmid + ',' + $scope.userid + ',' + $scope.examyear + ',' + $scope.qqt.Qval + ',' + new Date().getTime() + '}');
        };

        $scope.intab = function() {
            console.log('Now in the SSCE LitInEnglish_B Template page!');
        };

        $scope.intab();

        $timeout(function(){
           HeaderService.setTab(1);
        }, 100);

        $scope.pctused = 0;
        $scope.totaltimemins = 20;
        $scope.timegone = '0 hrs 0 mins 0 secs';
        $scope.timeleft = ' hrs 20 mins 0 secs';
        $scope.activeNav = 'Start';
        $scope.oldtime = 0;
        $scope.lefttime = 0;
        $scope.examyear = $rootScope.litineng_selected_year;
        $scope.qtlength = 0;

        $scope.getStartTime = function() {
            $scope.oldtime = new Date().getTime();
            console.log('start time is: ' + $scope.oldtime);
        };

        $scope.getStartTime();

        $scope.btnsList = _.pluck(_.values($scope.navbtns), 'title');

        $scope.getNum = function() {
            return $scope.qqt.Qval;
        };

        $scope.setNum = function(val) {
            $scope.qqt.Qval = val;
        };

        $scope.clearImg = function() {
            $scope.qqt.Q.img = "";
        };

        $scope.getNext = function() {
            if($scope.qtlength > $scope.sctn1PassaObjNum+1) {
                $scope.sctn1PassaObjNum = $scope.sctn1PassaObjNum + 1;
                $scope.setQst();
            } else {
                console.log('You have completed the questions in this section!');
            }
            $scope.logEvent();
        };

        $scope.getPrev = function() {
            if($scope.sctn1PassaObjNum > 0) {
                $scope.sctn1PassaObjNum = $scope.sctn1PassaObjNum - 1;
                $scope.setQst();
            } else {
                console.log('You have reached the first question in this section!');
            }
        };

        $scope.getFirst = function() {
            $scope.sctn1PassaObjNum = 0;
            $scope.setQst();
        };

        $scope.getLast = function() {
            $scope.sctn1PassaObjNum = $scope.qtlength - 1;
            $scope.setQst();
        };

        $scope.navclick = function(navtitle) {
            $scope.activeNav = navtitle;
        };

        $scope.getImage = function(val) {
            console.log('getImage val is: ' + val);
            if(val == undefined) return false;
            if(_.contains(val.split('**'), 'img')) { return true; };
            return false;
        };

        $scope.showImage = function(val) {
            console.log('showImage val is: ' + val);
            if(val == undefined) return false;
            if(_.contains(val.split('**'), 'img')) {
                return '/img/litineng/' + val.slice(3,val.length).split('**')[1];
            }
            return '';
        };

        console.log('$rootScope.litineng_selected_year is A: ' + $rootScope.litineng_selected_year);
        $scope.qtt = {};

        $scope.setToZero = function() {
            $scope.sctn1PassaObjNum = 0;
            $scope.currentQst = 0;
            $scope.setQst();
        };
        $scope.dinstruction = 'Answer All questions in this section.';

        $scope.sectionclick = function(val) {
            $scope.sectionHeader = val;
            $scope.markChosen(val);
            // console.log('val is: ' + val);
            if(val == 'Section 1 - Part 1') {
                $scope.dinstruction = 'Answer All questions in this section.';
                $scope.qqt = {
                    "qstarray": $scope.qtt.SA.P1.qst,
                    "qstlist": _.omit($scope.qtt.SA.P1, 'qst')
                };
                $scope.qtlength = _.keys($scope.qqt.qstlist).length;
                $scope.setToZero();
            } else if(val == 'Section 1 - Part 2') {
                $scope.dinstruction = 'Answer All questions in this section.';
                $scope.qqt = {
                    "qstarray": $scope.qtt.SA.P2.qst,
                    "qstlist": _.omit($scope.qtt.SA.P2, 'qst')
                };
                $scope.qtlength = _.keys($scope.qqt.qstlist).length;
                $scope.setToZero();
            } else if(val == 'Section 2 - Part 1') {
                $scope.qqt = {
                    "qstarray": $scope.qtt.SB.P1.qst,
                    "qstlist": _.omit($scope.qtt.SB.P1, 'qst')
                };
                // $scope.dinstruction = $scope.qqt.qstarray;
                $scope.qtlength = _.keys($scope.qqt.qstlist).length;
                $scope.setToZero();
            } else if(val == 'Section 2 - Part 2') {
                $scope.qqt = {
                    "qstarray": $scope.qtt.SB.P2.qst,
                    "qstlist": _.omit($scope.qtt.SB.P2, 'qst')
                };
                // $scope.dinstruction = $scope.qqt.qstarray;
                $scope.qtlength = _.keys($scope.qqt.qstlist).length;
                $scope.setToZero();
            } else if(val == 'Section 2 - Part 3') {
                $scope.qqt = {
                    "qstarray": $scope.qtt.SB.P3.qst,
                    "qstlist": _.omit($scope.qtt.SB.P3, 'qst')
                };
                // $scope.dinstruction = $scope.qqt.qstarray;
                $scope.qtlength = _.keys($scope.qqt.qstlist).length;
                $scope.setToZero();
            } else if(val == 'Section 2 - Part 4') {
                $scope.qqt = {
                    "qstarray": $scope.qtt.SB.P4.qst,
                    "qstlist": _.omit($scope.qtt.SB.P4, 'qst')
                };
                // $scope.dinstruction = $scope.qqt.qstarray;
                $scope.qtlength = _.keys($scope.qqt.qstlist).length;
                $scope.setToZero();
            }
        };

        $scope.sectionHeader = 'Section 1 - Part 1';        
        // console.log('$scope.qtt is now: ');
        // console.log($scope.qtt);

        $scope.sectionslist = [
            {'val' : 'Section 1 - Part 1', 'ischosen': 'chosen'},
            {'val' : 'Section 1 - Part 2', 'ischosen': ''},
            {'val' : 'Section 2 - Part 1', 'ischosen': ''},
            {'val' : 'Section 2 - Part 2', 'ischosen': ''},
            {'val' : 'Section 2 - Part 3', 'ischosen': ''},
            {'val' : 'Section 2 - Part 4', 'ischosen': ''}
        ];

        $scope.markChosen = function(val) {
            for(var e=0;e<$scope.sectionslist.length;e++) {
                $scope.sectionslist[e].ischosen = '';
            }

            if(val == 'Section 1 - Part 1') {
                $scope.sectionslist[0].ischosen = 'chosen';
            } else if(val == 'Section 1 - Part 2') {
                $scope.sectionslist[1].ischosen = 'chosen';
            }
             else if(val == 'Section 2 - Part 1') {
                $scope.sectionslist[2].ischosen = 'chosen';
            }
             else if(val == 'Section 2 - Part 2') {
                $scope.sectionslist[3].ischosen = 'chosen';
            }
             else if(val == 'Section 2 - Part 3') {
                $scope.sectionslist[4].ischosen = 'chosen';
            }
             else if(val == 'Section 2 - Part 4') {
                $scope.sectionslist[5].ischosen = 'chosen';
            }
        };

        $scope.markChosen('Section 1 - Part 1');
        $scope.selectedSection = 0;
        $scope.sctn1PassaObjNum = 0;
        $scope.currentQst = 0;

        $scope.setQst = function() {
            $scope.sctn1PassaObj = _.pick($scope.qqt.qstlist, _.keys($scope.qqt.qstlist)[$scope.sctn1PassaObjNum]);
            $scope.sc1PsaQst = $scope.sctn1PassaObj[_.keys($scope.sctn1PassaObj)]; 
            $scope.currentQst = $scope.sctn1PassaObjNum + 1;
            $scope.qstkey = _.keys($scope.sctn1PassaObj)[0];
            $scope.qstvalue = (_.values($scope.sctn1PassaObj)[0]).qs;
            $scope.imgvalue = (_.values($scope.sctn1PassaObj)[0]).img;
        };

        ApiService.getLitInEngSectionB($rootScope.litineng_selected_year)
            .then(function(response) {
                    console.log('The Api.getLitInEngSectionB() response is: ');
                    console.log(response);
                    console.log(response.data);
                    if(response.data) {
                        console.log('call successful.');
                        $scope.qtt = response.data;
                        if($scope.selectedSection == 0) {
                            $scope.qqt = {
                                "qstarray": $scope.qtt.SA.P1.qst,
                                "qstlist": _.omit($scope.qtt.SA.P1, 'qst')
                            };
                        }

                        $scope.qtlength = _.keys($scope.qqt.qstlist).length;

                        $scope.setQst();
                        $scope.getFirst();
                    }
                }, function(error) {
                    console.log('error', error);
                    // growl.error('Error: Api.getLitInEngSectionB() failed!', { ttl: 3000 });
                }
            );
    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('SscemathematicsbtemplateController', SscemathematicsbtemplateController);

    // SscemathematicsbtemplateController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'TimerService', 'growl', '$timeout'];

    /* @ngInject */
    function SscemathematicsbtemplateController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, TimerService, growl, $timeout, LoggingService) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        $scope.exmid = 'Math_B';
        $scope.logEvent = function() {
            LoggingService.postTrack('{' + $scope.exmid + ',' + $scope.userid + ',' + $scope.examyear + ',' + $scope.qqt.Qval + ',' + new Date().getTime() + '}');
        };

        $scope.intab = function() {
            console.log('Now in the SSCE Mathematics_B Template page!');
        };

        $scope.intab();

        $timeout(function(){
           HeaderService.setTab(1);
        }, 100);

        $scope.pctused = 0;
        $scope.totaltimemins = 20;
        $scope.timegone = '0 hrs 0 mins 0 secs';
        $scope.timeleft = ' hrs 20 mins 0 secs';
        $scope.activeNav = 'Start';
        $scope.oldtime = 0;
        $scope.lefttime = 0;
        $scope.examyear = $rootScope.mathematics_selected_year;

        $scope.getStartTime = function() {
            $scope.oldtime = new Date().getTime();
            console.log('start time is: ' + $scope.oldtime);
        };

        $scope.getStartTime();

        $scope.btnsList = _.pluck(_.values($scope.navbtns), 'title');

        $scope.qqt = {
            "Qval": 1,
            "Q": {
                "qs": "1. ",
                "opts": {
                    "q0": "A. ",
                    "q1": "B. ",
                    "q2": "C. ",
                    "q3": "D. ",
                    "q4": "E. "
                },
                "ans": "B"
            }
        };

        $scope.getNum = function() {
            return $scope.qqt.Qval;
        };

        $scope.setNum = function(val) {
            $scope.qqt.Qval = val;
        };

        $scope.clearImg = function() {
            $scope.qqt.Q.img = "";
        };

        $scope.getNext = function() {
            $scope.clearOptions($scope.getNum());
            if((_.keys($scope.qtt).length > $scope.qqt.Qval)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) + 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                };
            }
            // log this selection event
            $scope.logEvent();
        };

        $scope.getPrev = function() {
            if(($scope.qqt.Qval > 1)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) - 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                };
            }
        };

        $scope.getFirst = function() {
            console.log('$scope.qqt is: ');
            console.log($scope.qqt);
            console.log('$scope.qtt is: ');
            console.log($scope.qtt);
            $scope.qqt.Qval = 1;
            $scope.qqt.Q = _.values($scope.qtt)[0];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
        };

        $scope.getLast = function() {
            $scope.qqt.Qval = _.keys($scope.qtt).length;
            $scope.qqt.Q = _.values($scope.qtt)[_.keys($scope.qtt).length - 1];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
        };

        $scope.getLetter = function(val, indx) {
            if(_.contains(val.split('img**'), 'xx*')) {
                return '-';
            } else if(_.contains(val.split('**'), 'img')) {
                if(indx == '0'){ return 'A'; }
                if(indx == '1'){ return 'B'; }
                if(indx == '2'){ return 'C'; }
                if(indx == '3'){ return 'D'; }
                if(indx == '4'){ return 'E'; }
                if(indx == '5'){ return 'F'; }
                if(indx == '6'){ return 'G'; }
                if(indx == '7'){ return 'H'; }
                if(indx == '8'){ return 'I'; }
                if(indx == '9'){ return 'J'; }
            }  else {
                return val;
            }
        };

        $scope.getImage = function(val) {
            if(_.contains(val.split('**'), 'img')) { return true; };
            return (_.contains(val.split('**'), 'img'));
        };

        $scope.checkImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '';
            } else {
                return val;
            }
        };

        $scope.colorBorder = function(qst, opt, reslt) {
            if($rootScope.rtscore) {
                // remove all the border colors on all options
                $(".div_math_" + qst + " p").removeClass('redborder');
                $(".div_math_" + qst + " p").removeClass('greenborder');
                // now set the specific border on the option selected
                if(reslt==true) {
                    $("#div_math_" + qst + "_" + opt + " p").addClass('greenborder');
                } else {
                    $("#div_math_" + qst + "_" + opt + " p").addClass('redborder');
                }
            }
        };

        $scope.optClick = function(val1, val2) {
            // var ellm = val3 + "_" + val1 + "_" + val2;
            console.log('element ID is: ' + 'math' + "_" + val1 + "_" + val2);
            // $("#math_1_2").prop("checked") = true
            // $(".math_1").length = 5
            console.log('qst is: ' + val1 + ', opt is: ' + val2);
            if(val2==0) { 
                console.log('checkbox A clicked!');
                if($scope.qqt.Q.ans == 'A') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            if(val2==1) { 
                console.log('checkbox B clicked!');
                if($scope.qqt.Q.ans == 'B') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            if(val2==2) { 
                console.log('checkbox C clicked!');
                if($scope.qqt.Q.ans == 'C') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            if(val2==3) { 
                console.log('checkbox D clicked!');
                if($scope.qqt.Q.ans == 'D') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            if(val2==4) { 
                console.log('checkbox E clicked!');
                if($scope.qqt.Q.ans == 'E') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
        };

        $scope.clearOptions = function(val) {
            console.log('$scope.getNum() is: ' + val);
            if($("#math_" + val + "_0").prop("checked")) { $scope.seloption = '0'; $scope.setScores(val + "-0"); };
            if($("#math_" + val + "_1").prop("checked")) { $scope.seloption = '1'; $scope.setScores(val + "-1"); };
            if($("#math_" + val + "_2").prop("checked")) { $scope.seloption = '2'; $scope.setScores(val + "-2"); };
            if($("#math_" + val + "_3").prop("checked")) { $scope.seloption = '3'; $scope.setScores(val + "-3"); };
            if($("#math_" + val + "_4").prop("checked")) { $scope.seloption = '4'; $scope.setScores(val + "-4"); };

            $(".math_" + val + "").prop("checked", false);
            $(".div_math_" + val + " p").removeClass('redborder');
            $(".div_math_" + val + " p").removeClass('greenborder');
            console.log('$scope.seloption is: ' + $scope.seloption);       
        };

        $scope.showImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '/img/mathematics/' + val.slice(3,val.length).split('**')[1];
            }
            return '/img/mathematics/' + val.split('**')[1];
        };

        $scope.getImageLocation = function(val) {
            if(rr.split('**').length > 1) {
                return $scope.getImage("/img/mathematics/myimage.jpg");
            } else {
                return '';
            }
        };

        $scope.navclick = function(navtitle) {
            $scope.activeNav = navtitle;
        };

        console.log('$rootScope.mathematics_selected_year is A: ' + $rootScope.mathematics_selected_year);
        ApiService.getMathematicsSectionB($rootScope.mathematics_selected_year)
            .then(function(response) {
                    console.log('The Api.getMathematicsSectionB() response is: ');
                    console.log(response);
                    console.log(response.data);
                    if(response.data) {
                        console.log('call successful.');
                        $scope.qtt = response.data;

                        $scope.qqt.Qval = 1;
                        $scope.qqt.Q.qs = $scope.qtt.Q1.qs;
                        $scope.qqt.Q.opts = $scope.qtt.Q1.opts;
                        $scope.qqt.Q.ans = $scope.qtt.Q1.ans; 
                        
                        $scope.getFirst(); 
                    }
                }, function(error) {
                    console.log('error', error);
                    // growl.error('Error: Api.getAgricSciSectionB() failed!', { ttl: 3000 });
                }
            );  
    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('SscephysicsatemplateController', SscephysicsatemplateController);

    // SscephysicsatemplateController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'TimerService', 'growl', '$timeout'];

    /* @ngInject */
    function SscephysicsatemplateController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, TimerService, growl, $timeout, LoggingService) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        $scope.exmid = 'Phy_A';
        $scope.logEvent = function() {
            LoggingService.postTrack('{' + $scope.exmid + ',' + $scope.userid + ',' + $scope.examyear + ',' + $scope.qqt.Qval + ',' + new Date().getTime() + '}');
        };

        $scope.intab = function() {
            console.log('Now in the SSCE Physics_A Template page!');
        };

        $scope.intab();

        $timeout(function(){
           HeaderService.setTab(1);
        }, 100);

        $scope.pctused = 0;
        $scope.totaltimemins = 20;
        $scope.timegone = '0 hrs 0 mins 0 secs';
        $scope.timeleft = ' hrs 20 mins 0 secs';
        $scope.activeNav = 'Start';
        $scope.oldtime = 0;
        $scope.lefttime = 0;
        $rootScope.physics_selected_year = 1988;


        $scope.navbtns = [
            {
                title: 'First',
                icon: 'fa fa-fast-backward fa-1'
            },
            {
                title: 'Previous',
                icon: 'fa fa-step-backward fa-1'
            },
            {
                title: 'Next',
                icon: 'fa fa-step-forward fa-1'
            },
            {
                title: 'Last',
                icon: 'fa fa-fast-forward fa-1'
            },
            {
                title: 'Start',
                icon: 'fa fa-hourglass-start fa-1'
            },
            {
                title: 'Pause',
                icon: 'fa fa-pause fa-1'
            },
            {
                title: 'Continue',
                icon: 'fa fa-arrow-right fa-1'
            },
            {
                title: 'Save',
                icon: 'fa fa-cloud fa-1'
            },
            {
                title: 'Finish',
                icon: 'fa fa-stop fa-1'
            }
        ];

        $scope.getStartTime = function() {
            $scope.oldtime = new Date().getTime();
            console.log('start time is: ' + $scope.oldtime);
        };

        $scope.getStartTime();

        $scope.btnsList = _.pluck(_.values($scope.navbtns), 'title');

        $scope.btnclick = function(val) {            
            //console.log('btn clicked is: ' + $scope.btnsList[val]);
            console.log('You clicked: ' + $scope.btnsList[val]);
            if($scope.btnsList[val]=='Next'){
                $scope.getNext();
            } else if($scope.btnsList[val]=='Previous'){
                $scope.getPrev();
            } else if($scope.btnsList[val]=='First'){
                $scope.getFirst();
            } else if($scope.btnsList[val]=='Last'){
                $scope.getLast();
            } else if($scope.btnsList[val]=='Pause'){
                $scope.lefttime = TimerService.getTime($scope.oldtime, $scope.totaltimemins)[1];
                console.log('$scope.lefttime is: ' + $scope.lefttime);
                console.log('Pause time is: ');
                $scope.oldtime = new Date().getTime();
            } else if($scope.btnsList[val]=='Continue'){
                $scope.timeleft = $scope.lefttime;
                console.log('$scope.timeleft is: ' + $scope.timeleft);
                $scope.oldtime = 0;
            }
            $scope.timegoneleft = TimerService.getTime($scope.oldtime, $scope.totaltimemins);
            $scope.timegone = $scope.timegoneleft[0];
            $scope.timeleft = $scope.timegoneleft[1];
            $scope.pctused = ($scope.timegoneleft[2] > 100 ? 100 : $scope.timegoneleft[2]);
        };

        $scope.cnum = '1';
        $scope.cqst = [
            {
                num: '[A]. ',
                qt: [
                    'Explain with the aid of a diagram what is meant by the moment of a force about a point,'
                ],
                ans: 'No diagram here.'
            },
            {
                num: '[B]. ',
                qt: [
                    'State the conditions of equilibrium for a number of coplana parallel forces. A metre rule is found to balance at the 48 cm mark. When a body of mass 60g is suspended at the 6cm mark the balance point is found to be at the 30 cm mark.',
                    'Calculate (i) the mass of the metre rule (ii) the distance of the balance point from the zero end, if the body were moved to the 13cm mark.'
                ],
                ans: 'N/A'
            },
            {
                num: '[C]. ',
                qt: [
                    'Show that the efficiency E, the force ratio M.A. and the velocity ratio V.R of a machine are related by the equation. (E = (M.A/V.R)*100%).',
                    'The efficiency of a machine is 80%. Determine the work done by a person using this machine to raise a load of 200kg through a vertical distance of 3.0 m (Take g = 10 ms"2).'
                ],
                ans: 'N/A'
            }
        ];

        $scope.qsts = [
            {
                qst: [
                    {
                        num: '[A]. ',
                        qt: [
                            'Explain with the aid of a diagram what is meant by the moment of a force about a point,'
                        ],
                        ans: 'No diagram here.'
                    },
                    {
                        num: '[B]. ',
                        qt: [
                            'State the conditions of equilibrium for a number of coplana parallel forces. A metre rule is found to balance at the 48 cm mark. When a body of mass 60g is suspended at the 6cm mark the balance point is found to be at the 30 cm mark.',
                            'Calculate (i) the mass of the metre rule (ii) the distance of the balance point from the zero end, if the body were moved to the 13cm mark.'
                        ],
                        ans: 'N/A'
                    },
                    {
                        num: '[C]. ',
                        qt: [
                            'Show that the efficiency E, the force ratio M.A. and the velocity ratio V.R of a machine are related by the equation. (E = (M.A/V.R)*100%).',
                            'The efficiency of a machine is 80%. Determine the work done by a person using this machine to raise a load of 200kg through a vertical distance of 3.0 m (Take g = 10 ms"2).'
                        ],
                        ans: 'N/A'
                    }
                ],
            },
            {
                qst: [
                    {
                        num: '[A2]. ',
                        qt: [
                            'Explain with the aid of a diagram what is meant by the moment of a force about a point,'
                        ],
                        ans: 'No diagram here.'
                    },
                    {
                        num: '[B2]. ',
                        qt: [
                            'State the conditions of equilibrium for a number of coplana parallel forces. A metre rule is found to balance at the 48 cm mark. When a body of mass 60g is suspended at the 6cm mark the balance point is found to be at the 30 cm mark.',
                            'Calculate (i) the mass of the metre rule (ii) the distance of the balance point from the zero end, if the body were moved to the 13cm mark.'
                        ],
                        ans: 'N/A'
                    },
                    {
                        num: '[C2]. ',
                        qt: [
                            'Show that the efficiency E, the force ratio M.A. and the velocity ratio V.R of a machine are related by the equation. (E = (M.A/V.R)*100%).',
                            'The efficiency of a machine is 80%. Determine the work done by a person using this machine to raise a load of 200kg through a vertical distance of 3.0 m (Take g = 10 ms"2).'
                        ],
                        ans: 'N/A'
                    }
                ],
            }
        ];

        $scope.qqt = {
            "Qval": 1,
            "Q": {
                "a": {
                    "q0": "(a) Explain with the aid of a diagram what is meant by the moment of a force about a point,"
                },
                "b": {
                    "q0": "(b) State the conditions of equilibrium for a number of coplana parallel forces. A metre rule is found to balance at the 48 cm mark. When a body of mass 60g is suspended at the 6cm mark the balance point is found to be at the 30 cm mark. Calculate",
                    "q1": "(i) the mass of the metre rule",
                    "q2": "(ii) the distance of the balance point from the zero end, if the body were moved to the 13cm mark,"
                },
                "c": {
                    "q0": "(c) Show that the efficiency E, the force ratio M.A. and the velocity ratio V.R of a machine are related by the equation.",
                    "q1": "E = (M.A x 100%)/V.R",
                    "q2": "The efficiency of a machine is 80%. Determine the work done by a person using this machine to raise a load of 200kg through a vertical distance of 3.0 m (Take g = 10 ms'2)."
                }
            }
        };

        $scope.getNum = function() {
            return $scope.qqt.Qval;
        };

        $scope.setNum = function(val) {
            $scope.qqt.Qval = val;
        };

        $scope.getNext = function() {
            $scope.clearOptions($scope.getNum());
            if((_.keys($scope.qtt).length > $scope.qqt.Qval)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) + 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
            }
            $scope.logEvent();
        };

        $scope.getPrev = function() {
            if(($scope.qqt.Qval > 1)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) - 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
            }
        };

        $scope.getFirst = function() {
            $scope.qqt.Qval = 1;
            $scope.qqt.Q = _.values($scope.qtt)[0];
        };

        $scope.getLast = function() {
            $scope.qqt.Qval = _.keys($scope.qtt).length;
            $scope.qqt.Q = _.values($scope.qtt)[_.keys($scope.qtt).length - 1];
        };

        $scope.getImage = function(val) {
            return _.contains(val.split('**'), 'img');
        };

        $scope.checkImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '';
            } else {
                return val;
            }
        };

        $scope.colorBorder = function(qst, opt, reslt) {
            if($rootScope.rtscore) {
                // remove all the border colors on all options
                $(".div_phy_" + qst + " p").removeClass('redborder');
                $(".div_phy_" + qst + " p").removeClass('greenborder');
                // now set the specific border on the option selected
                if(reslt==true) {
                    $("#div_phy_" + qst + "_" + opt + " p").addClass('greenborder');
                } else {
                    $("#div_phy_" + qst + "_" + opt + " p").addClass('redborder');
                }
            }
        };

        $scope.optClick = function(val1, val2) {
            // var ellm = val3 + "_" + val1 + "_" + val2;
            console.log('element ID is: ' + 'phy' + "_" + val1 + "_" + val2);
            // $("#phy_1_2").prop("checked") = true
            // $(".phy_1").length = 5
            console.log('qst is: ' + val1 + ', opt is: ' + val2);
            if(val2==0) { 
                console.log('checkbox A clicked!');
                if($scope.qqt.Q.ans == 'A') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            if(val2==1) { 
                console.log('checkbox B clicked!');
                if($scope.qqt.Q.ans == 'B') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            if(val2==2) { 
                console.log('checkbox C clicked!');
                if($scope.qqt.Q.ans == 'C') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            if(val2==3) { 
                console.log('checkbox D clicked!');
                if($scope.qqt.Q.ans == 'D') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            if(val2==4) { 
                console.log('checkbox E clicked!');
                if($scope.qqt.Q.ans == 'E') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
        };

        $scope.clearOptions = function(val) {
            console.log('$scope.getNum() is: ' + val);
            if($("#phy_" + val + "_0").prop("checked")) { $scope.seloption = '0'; $scope.setScores(val + "-0"); };
            if($("#phy_" + val + "_1").prop("checked")) { $scope.seloption = '1'; $scope.setScores(val + "-1"); };
            if($("#phy_" + val + "_2").prop("checked")) { $scope.seloption = '2'; $scope.setScores(val + "-2"); };
            if($("#phy_" + val + "_3").prop("checked")) { $scope.seloption = '3'; $scope.setScores(val + "-3"); };
            if($("#phy_" + val + "_4").prop("checked")) { $scope.seloption = '4'; $scope.setScores(val + "-4"); };

            $(".phy_" + val + "").prop("checked", false);
            $(".div_phy_" + val + " p").removeClass('redborder');
            $(".div_phy_" + val + " p").removeClass('greenborder');
            console.log('$scope.seloption is: ' + $scope.seloption);       
        };

        $scope.showImage = function(val) {
            return '/img/physics/' + val.split('**')[1];
        };

        $scope.getImageLocation = function(val) {
            if(rr.split('**').length > 1) {
                return $scope.getImage("/img/physics/myimage.jpg");
            } else {
                return '';
            }
        };

        $scope.navclick = function(navtitle) {
            $scope.activeNav = navtitle;
        };

        console.log('$rootScope.physics_selected_year is: ' + $rootScope.physics_selected_year);

        $scope.qtt = ApiService.getPhysicsSectionA($rootScope.physics_selected_year);        
    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('SscephysicsbtemplateController', SscephysicsbtemplateController);

    // SscephysicsbtemplateController.$inject = ['$scope', '$log', '$interval', '$location', '$controller', '$rootScope', 'SaveexamService', 'ConfigService', 'HeaderService', 'ApiService', 'TimerService', 'LoggingService', 'growl', '$timeout'];

    /* @ngInject */
    function SscephysicsbtemplateController($scope, window, $log, $interval, $location, $controller, $rootScope, SaveexamService, ConfigService, HeaderService, ApiService, TimerService, LoggingService, growl, $timeout) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        var baseRoute = '';
        $scope.exmid = 'phy_B';

        $scope.logEvent = function() {
            LoggingService.postTrack('{' + $scope.exmid + ',' + $scope.userid + ',' + $scope.examyear + ',' + $scope.qqt.Qval + ',' + new Date().getTime() + '}');
        };

        $scope.intab = function() {
            console.log('Now in the SSCE Physics_B Template page!');
        };

        $scope.intab();

        $timeout(function(){
           HeaderService.setTab(1);
        }, 100);

        $scope.pctused = 0;
        $scope.totaltimemins = 5;
        $scope.timegone = '0 hrs 0 mins 0 secs';
        $scope.timeleft = ' hrs 5 mins 0 secs';
        $scope.activeNav = 'Start';
        $scope.oldtime = 0;
        $scope.lefttime = 0;
        $scope.examyear = $rootScope.physics_selected_year;
        $scope.movedTime = false;
        $scope.timerStopped = false;

        $scope.themodal = {
            modalShown: false
        };
        $scope.passed = 0;
        $scope.wrong = 0;
        $scope.skipped = 0;
        $scope.skippedArray = [];

        $scope.toggleModal = function(val) {
            console.log('$scope.toggleModal called.');
            (val == 1) ? ($scope.themodal.modalShown = !$scope.themodal.modalShown) : (console.log('modal not selected!'));
            $scope.logscope();
        };

        $scope.logscope = function() {
            console.log('$scope.qtt is: ');
            console.log($scope.qtt);
        };

        $scope.gotoTC = function() {
            $scope.themodal.modalShown = false;
            $location.path(baseRoute + 'testcenter');
        };

        $scope.qstlength = function() {
            return _.keys($scope.qtt).length;
        };

        $scope.getSkippedArray = function() {
            return $scope.skippedArray.join(',');
        };

        $scope.goToQst = function(val) {
            console.log('val is now: ' + $scope.skippedArray[val]);
            console.log('$scope.qtt is:...');
            console.log($scope.qtt);
            console.log(_.values($scope.qtt)[$scope.skippedArray[val] - 1]);
            // $scope.qqt = _.values($scope.qtt)[$scope.skippedArray[val] - 1];
            $scope.logscope();
            $scope.clearOptions($scope.getNum());
            $scope.qqt.Qval = $scope.skippedArray[val] - 1;
            $scope.qqt.Q = _.values($scope.qtt)[$scope.skippedArray[val] - 1];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
            $scope.checkSel($scope.qqt.Q);
            // $('.ng-modal-close').click();
            $scope.toggleModal(1);
        };

        $scope.getpassed = function() {
            $scope.passed = 0;
            $scope.wrong = 0;
            $scope.skipped = 0;
            $scope.skippedArray = [];
            // console.log('_.keys($scope.qtt).length is: ' + _.keys($scope.qtt).length);
            for(var i=0;i<_.keys($scope.qtt).length;i++) {
                if(_.values($scope.qtt)[i].sel == "") {
                    $scope.skipped = $scope.skipped + 1;
                    $scope.skippedArray.push(i);
                } else if(_.values($scope.qtt)[i].ans == _.values($scope.qtt)[i].sel) {
                    $scope.passed = $scope.passed + 1;
                } else {
                    $scope.wrong = $scope.wrong + 1;
                }
            }
            return $scope.passed;
        };

        $scope.getpctscore = function() {
            return (($scope.passed/($scope.passed + $scope.wrong)) * 100).toFixed(2);
        };

        $scope.moveTime = function() {
            if(!$scope.timerStopped) {
                $interval(function () {
                $scope.updateTime();
                }, 5000);        
            }
        };

        $scope.updateTime = function() {
            if(!$scope.timerStopped) {
                $scope.timegoneleft = TimerService.getTime($scope.oldtime, $scope.totaltimemins);
                $scope.timegone = $scope.timegoneleft[0];
                $scope.timeleft = $scope.timegoneleft[1];
                $scope.pctused = ($scope.timegoneleft[2] > 100 ? 100 : $scope.timegoneleft[2]);
                if(!$scope.movedTime) { 
                    console.log('tick tock begins...');
                    $scope.movedTime = !$scope.movedTime;
                }
            }
        };

        $scope.setTimeLeft = function() {
            console.log('setting time left to: ' + $scope.timegoneleft);
            window.localStorage.tmlft = TimerService.getTL($scope.oldtime, $scope.totaltimemins);
            window.sessionStorage.tmlft = TimerService.getTL($scope.oldtime, $scope.totaltimemins);
        };

        $scope.getStartTime = function() {
            $scope.oldtime = new Date().getTime();
            console.log('start time is: ' + $scope.oldtime);
        };

        $scope.getNum = function() {
            return $scope.qqt.Qval;
        };

        $scope.colorBorder = function(qst, opt, reslt) {
            if($rootScope.rtscore) {
                // remove all the border colors on all options
                $(".div_phy_" + qst + " p").removeClass('redborder');
                $(".div_phy_" + qst + " p").removeClass('greenborder');
                // now set the specific border on the option selected
                if(reslt==true) {
                    $("#div_phy_" + qst + "_" + opt + " p").addClass('greenborder');
                } else {
                    $("#div_phy_" + qst + "_" + opt + " p").addClass('redborder');
                }
            }
        };

        $scope.checkSel = function(val) {
            // console.log('The $scope.qqt.Q.sel is now: ' + $scope.qqt.Q.sel);
            if($scope.qqt.Q.sel != "") {
                console.log("checking the options...");
                if($scope.qqt.Q.sel == "A") { 
                    console.log("A...");
                    //$('#phy_4_1').prop('checked', 'checked');
                    $(".phys:eq(0) input").prop('checked', 'checked');
                    if($rootScope.rtscore) {
                        if($scope.qqt.Q.sel == $scope.qqt.Q.ans) {
                           $(".phys:eq(0)").addClass('greenborder'); 
                        } else {
                            $(".phys:eq(0)").addClass('redborder');
                        }
                    }
                    // $(".phys:eq(0)").addClass('greenborder');
                } else if($scope.qqt.Q.sel == "B") { 
                    console.log("B...");
                    $(".phys:eq(1) input").prop('checked', 'checked');
                    if($rootScope.rtscore) {
                        if($scope.qqt.Q.sel == $scope.qqt.Q.ans) {
                           $(".phys:eq(1)").addClass('greenborder'); 
                        } else {
                            $(".phys:eq(1)").addClass('redborder');
                        }
                    }
                } else if($scope.qqt.Q.sel == "C") { 
                    console.log("C...");
                    $(".phys:eq(2) input").prop('checked', 'checked');
                    if($rootScope.rtscore) {
                        if($scope.qqt.Q.sel == $scope.qqt.Q.ans) {
                           $(".phys:eq(2)").addClass('greenborder'); 
                        } else {
                            $(".phys:eq(2)").addClass('redborder');
                        }
                    }
                } else if($scope.qqt.Q.sel == "D") { 
                    console.log("D...");
                    $(".phys:eq(3) input").prop('checked', 'checked');
                    if($rootScope.rtscore) {
                        if($scope.qqt.Q.sel == $scope.qqt.Q.ans) {
                           $(".phys:eq(3)").addClass('greenborder'); 
                        } else {
                            $(".phys:eq(3)").addClass('redborder');
                        }
                    }
                } else if($scope.qqt.Q.sel == "E") { 
                    console.log("E...");
                    $(".phys:eq(4) input").prop('checked', 'checked');
                    if($rootScope.rtscore) {
                        if($scope.qqt.Q.sel == $scope.qqt.Q.ans) {
                           $(".phys:eq(4)").addClass('greenborder'); 
                        } else {
                            $(".phys:eq(4)").addClass('redborder');
                        }
                    }
                } else {}
            }
        };

        $scope.selClickedOption = function(val1, val2) {
            if(val2==0) { 
                console.log('checkbox A clicked!');
                $scope.qqt.Q.sel = 'A';
                if($scope.qqt.Q.ans == 'A') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            else if(val2==1) { 
                console.log('checkbox B clicked!');
                $scope.qqt.Q.sel = 'B';
                if($scope.qqt.Q.ans == 'B') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            else if(val2==2) { 
                console.log('checkbox C clicked!');
                $scope.qqt.Q.sel = 'C';
                if($scope.qqt.Q.ans == 'C') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            else if(val2==3) { 
                console.log('checkbox D clicked!');
                $scope.qqt.Q.sel = 'D';
                if($scope.qqt.Q.ans == 'D') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            else if(val2==4) { 
                console.log('checkbox E clicked!');
                $scope.qqt.Q.sel = 'E';
                if($scope.qqt.Q.ans == 'E') {
                    $scope.colorBorder(val1, val2, true);
                } else {
                    $scope.colorBorder(val1, val2, false);
                }
            }
            else {}
        };

        $scope.optClick = function(val1, val2) {
            console.log('element ID is: ' + 'phy' + "_" + val1 + "_" + val2);
            console.log('qst is: ' + val1 + ', opt is: ' + val2);
            $scope.selClickedOption(val1, val2);
        };

        $scope.clearOptions = function(val) {
            console.log('$scope.getNum() is: ' + val);
            if($("#phy_" + val + "_0").prop("checked")) { $scope.seloption = '0'; $scope.setScores(val + "-0"); }
            else if($("#phy_" + val + "_1").prop("checked")) { $scope.seloption = '1'; $scope.setScores(val + "-1"); }
            else if($("#phy_" + val + "_2").prop("checked")) { $scope.seloption = '2'; $scope.setScores(val + "-2"); }
            else if($("#phy_" + val + "_3").prop("checked")) { $scope.seloption = '3'; $scope.setScores(val + "-3"); }
            else if($("#phy_" + val + "_4").prop("checked")) { $scope.seloption = '4'; $scope.setScores(val + "-4"); }
            else {}

            $(".phy_" + val + "").prop("checked", false);
            $(".div_phy_" + val + " p").removeClass('redborder');
            $(".div_phy_" + val + " p").removeClass('greenborder');
            console.log('$scope.seloption is: ' + $scope.seloption);       
        };

        $scope.getStartTime();

        $scope.btnsList = _.pluck(_.values($scope.navbtns), 'title');

        $scope.qqt = {
            "Qval": 1,
            "Q": {
                "qs": "1. Which of the units of the following physical quantities are derived? I. Area II. Thrust III. Pressure IV. Mass ",
                "opts": {
                    "q0": "A. I, II, III and IV",
                    "q1": "B. I, II and III only",
                    "q2": "C. I, II and IV only",
                    "q3": "D. I, and III only",
                    "q4": "E. I and IV only"
                },
                "ans": "B"
            }
        };

        $scope.setNum = function(val) {
            $scope.qqt.Qval = val;
        };

        $scope.clearImg = function() {
            $scope.qqt.Q.img = "";
        };

        $scope.logClear = function() {
            $scope.logscope();
            $scope.clearOptions($scope.getNum());
        };

        $scope.moveSetTime = function() {
            $scope.moveTime();
            // $scope.updateTime();
            $scope.setTimeLeft();
        };

        $scope.getNext = function() {
            if($scope.getNum() == 60) {
                $scope.toggleModal(1);
            } else {
                $scope.logscope();
                $scope.clearOptions($scope.getNum());
                if((_.keys($scope.qtt).length > $scope.qqt.Qval)) {
                    $scope.qqt.Qval = (parseInt($scope.qqt.Qval) + 1);
                    $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                    if(!$scope.qqt.Q.img) {
                        $scope.clearImg();
                    };
                    $scope.checkSel($scope.qqt.Q);
                    $scope.moveSetTime();
                }
            }
            $scope.logEvent();
        };

        $scope.getPrev = function() {
            $scope.logscope();
            $scope.clearOptions($scope.getNum());
            if(($scope.qqt.Qval > 1)) {
                $scope.qqt.Qval = (parseInt($scope.qqt.Qval) - 1);
                $scope.qqt.Q = _.values($scope.qtt)[$scope.qqt.Qval - 1];
                if(!$scope.qqt.Q.img) {
                    $scope.clearImg();
                };
                $scope.checkSel($scope.qqt.Q);
                $scope.moveSetTime();
            }
        };

        $scope.getFirst = function() {
            $scope.logscope();
            $scope.clearOptions($scope.getNum());
            $scope.qqt.Qval = 1;
            $scope.qqt.Q = _.values($scope.qtt)[0];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
            $scope.checkSel($scope.qqt.Q);
            $scope.moveSetTime();
        };

        $scope.getLast = function() {
            $scope.logscope();
            $scope.clearOptions($scope.getNum());
            $scope.qqt.Qval = _.keys($scope.qtt).length;
            $scope.qqt.Q = _.values($scope.qtt)[_.keys($scope.qtt).length - 1];
            if(!$scope.qqt.Q.img) {
                $scope.clearImg();
            };
            $scope.checkSel($scope.qqt.Q);
            $scope.moveSetTime();
        };

        $scope.getSave = function() {
            $scope.logscope();
            console.log('Save button was clicked!!!');
            console.log($scope.qtt);
            // $scope.qqt.Qval = _.keys($scope.qtt).length;
            // $scope.qqt.Q = _.values($scope.qtt)[_.keys($scope.qtt).length - 1];
            console.log($scope.qqt.Qval);
            console.log($scope.qqt.Q);
            var qArry = "";
            console.log('_.values($scope.qtt) is: ');
            // console.log(_.values($scope.qtt).sel);
            _.each(_.values($scope.qtt), function(obj) {
                if(obj.sel != "") {
                    qArry = qArry + obj.sel;
                } else {
                    qArry = qArry + "Z";
                }
                
            });
            // Save the current exam state to localStorage
            SaveexamService.saveExam({
                tmlft: TimerService.getTL($scope.oldtime, $scope.totaltimemins),
                exmid: $scope.exmid,
                examyear: $scope.examyear,
                dt: Date().split('(')[0],//.split('GMT')[0].replace(' ','-').replace(' ','-').replace(' ','-').replace(' ','-').replace(' ','-'),
                qArry: qArry
            });
            $scope.moveSetTime();
        };

        $scope.getLetter = function(val, indx) {
            if(val==undefined) {
                console.log('returning T...');
                return 'T';
            } else if(_.contains(val.split('img**'), 'xx*')) {
                return '-';
            } else if(_.contains(val.split('**'), 'img')) {
                if(indx == '0'){ return 'A'; }
                if(indx == '1'){ return 'B'; }
                if(indx == '2'){ return 'C'; }
                if(indx == '3'){ return 'D'; }
                if(indx == '4'){ return 'E'; }
                if(indx == '5'){ return 'F'; }
                if(indx == '6'){ return 'G'; }
                if(indx == '7'){ return 'H'; }
                if(indx == '8'){ return 'I'; }
                if(indx == '9'){ return 'J'; }
            }  else {
                return val;
            }
        };

        $scope.getImage = function(val) {
            if(_.contains(val.split('**'), 'xx*img')) { return true; };
            return (_.contains(val.split('**'), 'img'));
        };

        $scope.checkImage = function(val) {
            if(_.contains(val.split('**'), 'img')) {
                return '';
            } else {
                return val;
            }
        };

        $scope.showImage = function(val) {
            if(_.contains(val.split('**'), 'xx*img')) {
                return '/img/physics/' + val.slice(3,val.length).split('**')[1];
            }
            return '/img/physics/' + val.split('**')[1];
        };

        $scope.getImageLocation = function(val) {
            if(rr.split('**').length > 1) {
                return $scope.getImage("/img/physics/myimage.jpg");
            } else {
                return '';
            }
        };

        $scope.navclick = function(navtitle) {
            $scope.activeNav = navtitle;
        };

        $scope.dresults = {
            correct: 0,
            wrong: 0,
            ishide: 'hide',
            hidebtn1: ''
        };

        $scope.seeresults = function() {
            console.log('$scope.seeresults clicked!');
            $scope.dresults.correct = 36;
            $scope.dresults.wrong = 24;
            $scope.dresults.ishide = '';
            $scope.hidebtn1 = 'hide';
            $scope.hidebtn2 = '';
            $scope.dskipped.ishide = 'hide';
        };

        $scope.viewskipped = function() {
            console.log('$scope.viewskipped clicked!');
            $scope.dskipped.ishide = '';
            $scope.dskipped.arry = [3, 14, 48];
            $scope.hidebtn1 = '';
            $scope.dresults.ishide = 'hide';
            $scope.hidebtn2 = 'hide';
        };

        $scope.dskipped = {
            ishide: 'hide',
            arry: []
        };
        
        $scope.restart = function() {
            console.log('$scope.restart clicked!');
        };

        console.log('$rootScope.physics_selected_year is B: ' + $rootScope.physics_selected_year);

        // $scope.qtt = ApiService.getPhysicsSectionB($rootScope.physics_selected_year);
        ApiService.getPhysicsSectionB($rootScope.physics_selected_year)
            .then(function(response) {
                    console.log('The Api.getPhysicsSectionB() response is: ');
                    console.log(response);
                    console.log(response.data);
                    if(response.data) {
                        console.log('call successful.');
                        $scope.qtt = response.data;

                        $scope.qqt.Qval = 1;
                        $scope.qqt.Q.qs = $scope.qtt.Q1.qs;
                        $scope.qqt.Q.opts = $scope.qtt.Q1.opts;
                        $scope.qqt.Q.ans = $scope.qtt.Q1.ans; 
                        
                        $scope.getFirst(); 
                    }
                }, function(error) {
                    console.log('error', error);
                    // growl.error('Error: Api.getPhysicsSectionB() failed!', { ttl: 3000 });
                }
            );
    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('SscetemplateController', SscetemplateController);

    // SscetemplateController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'HeaderService', 'ApiService', 'growl', '$timeout'];

    /* @ngInject */
    function SscetemplateController($scope, $log, $location, $controller, $rootScope, ConfigService, HeaderService, ApiService, growl, $timeout, LoggingService) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        $rootScope.theAPI = '';
        var baseRoute = '';
        console.log('$rootScope.currentSubject is: ' + $rootScope.currentSubject);
        $scope.exmid = $rootScope.currentSubject;
        $scope.logEvent = function() {
            LoggingService.postTrack('{sub-select,' + $scope.exmid + ',' + $scope.userid + ',' + $scope.yrpick + ',' + new Date().getTime() + '}');
        };

        $scope.headings = {};
        $scope.yrpick = '1988';
        $scope.q1 = {};
        $scope.q2 = {};

        $scope.getHeaders = {
            physics: {
                subject: 'Physics',
                examtype: 'SSCE',
                sections: 'Theory, Practicals and Objectives',
                years: '1988 - 2015',
                yrpick: '1988',
                yrslist: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000']
            },
            english: {
                subject: 'English',
                examtype: 'SSCE',
                sections: 'Objective Test Questions',
                years: '1988 - 2015',
                yrpick: '1988',
                yrslist: ['1988','1989','1990']
            },
            chemistry: {
                subject: 'Chemistry',
                examtype: 'SSCE',
                sections: 'Objective Test Questions',
                years: '1988 - 2015',
                yrpick: '1988',
                yrslist: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000']
            },
            economics: {
                subject: 'Economics',
                examtype: 'SSCE',
                sections: 'Objective Test Questions',
                years: '1988 - 2015',
                yrpick: '1988',
                yrslist: ['1988','1989','1990']
            },
            geography: {
                subject: 'Geography',
                examtype: 'SSCE',
                sections: 'Objective Test Questions',
                years: '1988 - 2015',
                yrpick: '1988',
                yrslist: ['1988','1989','1990']
            },
            mathematics: {
                subject: 'Mathematics',
                examtype: 'SSCE',
                sections: 'Objective Test Questions',
                years: '1988 - 2015',
                yrpick: '1988',
                yrslist: ['1988','1989','1990']
            },
            agricsci: {
                subject: 'AgricSci',
                examtype: 'SSCE',
                sections: 'Objective Test Questions',
                years: '1988 - 2015',
                yrpick: '1988',
                yrslist: ['1988','1989','1990']
            },
            government: {
                subject: 'Government',
                examtype: 'SSCE',
                sections: 'Objective Test Questions',
                years: '1988 - 2015',
                yrpick: '1988',
                yrslist: ['1988','1989','1990']
            },
            commerce: {
                subject: 'Commerce',
                examtype: 'SSCE',
                sections: 'Objective Test Questions',
                years: '1989 - 2015',
                yrpick: '1989',
                yrslist: ['1989','1990','1991']
            },
            biology: {
                subject: 'Biology',
                examtype: 'SSCE',
                sections: 'Objective Test Questions',
                years: '1989 - 2015',
                yrpick: '1988',
                yrslist: ['1988','1989']
            },
            litineng: {
                subject: 'Literature in English',
                examtype: 'SSCE',
                sections: 'Objective Test Questions',
                years: '1989 - 2015',
                yrpick: '1988',
                yrslist: ['1998']
            }
        };

        if($rootScope.currentSubject == 'Physics') {
            $scope.headings = $scope.getHeaders.physics;
            $scope.yrpick = $scope.getHeaders.physics.yrpick;
            $rootScope.physics_selected_year = $scope.getHeaders.physics.yrpick;

            $scope.q1 = {
                title: 'Section A - Essay Questions',
                desc: 'This section contains 4 questions. Answer three questions only from this section.',
                allottime: '1 hr 30 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscephysicsatemplate',
                href2: 'sscephysicsatemplatepast'
            };

            $scope.q2 = {
                title: 'Section B - Objective Test Questions',
                desc: 'This section contains 60 multiple choice questions. Answer All questions in this section.',
                allottime: '2 hrs.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscephysicsbtemplate',
                href2: '/sscephysicsbtemplatepast'
            };
        } else if($rootScope.currentSubject == 'English') {
            $scope.headings = $scope.getHeaders.english;
            $scope.yrpick = $scope.getHeaders.english.yrpick;
            $rootScope.english_selected_year = $scope.getHeaders.english.yrpick;

            $scope.q1 = {
                title: 'Part 1 - Theory Questions',
                desc: 'This Part Contains Questions in a Story Section, a Comprehension Section, and a Summary Section. Answer all Questions Available.',
                allottime: '1 hr 30 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'ssceenglishatemplate',
                href2: 'ssceenglishatemplatepast'
            };

            $scope.q2 = {
                title: 'Part 2 - Objective Test Questions',
                desc: 'This Part Contains a Total of 100 Questions in Multiple Sections. Answer All Questions in Each Section.',
                allottime: '2 hrs 25 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'ssceenglishbtemplate',
                href2: '/ssceenglishbtemplatepast'
            };
        } else if($rootScope.currentSubject == 'Chemistry') {
            $scope.headings = $scope.getHeaders.chemistry;
            $scope.yrpick = $scope.getHeaders.chemistry.yrpick;
            $rootScope.chemistry_selected_year = $scope.getHeaders.chemistry.yrpick;

            $scope.q1 = {
                title: 'Part 1 - Theory Questions',
                desc: 'This Part Contains Questions in a Story Section, a Comprehension Section, and a Summary Section. Answer all Questions Available.',
                allottime: '1 hr 30 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscechemistryatemplate',
                href2: 'sscechemistryatemplatepast'
            };

            $scope.q2 = {
                title: 'Part 2 - Objective Test Questions',
                desc: 'This Part Contains a Total of 50 Questions in Multiple Sections. Answer All Questions in Each Section.',
                allottime: '2 hrs 25 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscechemistrybtemplate',
                href2: '/sscechemistrybtemplatepast'
            };
        } else if($rootScope.currentSubject == 'Literature in English') {
            $scope.headings = $scope.getHeaders.litineng;
            $scope.yrpick = $scope.getHeaders.litineng.yrpick;
            $rootScope.litineng_selected_year = $scope.getHeaders.litineng.yrpick;

            $scope.q1 = {
                title: 'Part 1 - Theory Questions',
                desc: 'This Part Contains Questions in a Story Section, a Comprehension Section, and a Summary Section. Answer all Questions Available.',
                allottime: '1 hr 30 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscelitinengatemplate',
                href2: 'sscelitinengatemplatepast'
            };

            $scope.q2 = {
                title: 'Part 2 - Objective Test Questions',
                desc: 'This Part Contains a Total of 100 Questions in Multiple Sections. Answer All Questions in Each Section.',
                allottime: '2 hrs 25 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscelitinengbtemplate',
                href2: '/sscelitinengbtemplatepast'
            };
        } else if($rootScope.currentSubject == 'Economics') {
            $scope.headings = $scope.getHeaders.economics;
            $scope.yrpick = $scope.getHeaders.economics.yrpick;
            $rootScope.economics_selected_year = $scope.getHeaders.economics.yrpick;

            $scope.q1 = {
                title: 'Part 1 - Theory Questions',
                desc: 'This Part Contains Questions in a Story Section, a Comprehension Section, and a Summary Section. Answer all Questions Available.',
                allottime: '1 hr 30 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'ssceeconomicsatemplate',
                href2: 'ssceeconomicsatemplatepast'
            };

            $scope.q2 = {
                title: 'Part 2 - Objective Test Questions',
                desc: 'This Part Contains a Total of 100 Questions in Multiple Sections. Answer All Questions in Each Section.',
                allottime: '2 hrs 25 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'ssceeconomicsbtemplate',
                href2: '/ssceeconomicsbtemplatepast'
            };            
        } else if($rootScope.currentSubject == 'Geography') {
            $scope.headings = $scope.getHeaders.geography;
            $scope.yrpick = $scope.getHeaders.geography.yrpick;
            $rootScope.geography_selected_year = $scope.getHeaders.geography.yrpick;

            $scope.q1 = {
                title: 'Part 1 - Theory Questions',
                desc: 'This Part Contains Questions in a Story Section, a Comprehension Section, and a Summary Section. Answer all Questions Available.',
                allottime: '1 hr 30 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscegeographyatemplate',
                href2: 'sscegeographyatemplatepast'
            };

            $scope.q2 = {
                title: 'Part 2 - Objective Test Questions',
                desc: 'This Part Contains a Total of 100 Questions in Multiple Sections. Answer All Questions in Each Section.',
                allottime: '2 hrs 25 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscegeographybtemplate',
                href2: '/sscegeographybtemplatepast'
            };            
        } else if($rootScope.currentSubject == 'Mathematics') {
            $scope.headings = $scope.getHeaders.mathematics;
            $scope.yrpick = $scope.getHeaders.mathematics.yrpick;
            $rootScope.mathematics_selected_year = $scope.getHeaders.mathematics.yrpick;

            $scope.q1 = {
                title: 'Part 1 - Theory Questions',
                desc: 'This Part Contains Questions in a Story Section, a Comprehension Section, and a Summary Section. Answer all Questions Available.',
                allottime: '1 hr 30 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscemathematicsatemplate',
                href2: 'sscemathematicsatemplatepast'
            };

            $scope.q2 = {
                title: 'Part 2 - Objective Test Questions',
                desc: 'This Part Contains a Total of 100 Questions in Multiple Sections. Answer All Questions in Each Section.',
                allottime: '2 hrs 25 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscemathematicsbtemplate',
                href2: '/sscemathematicsbtemplatepast'
            };            
        } else if($rootScope.currentSubject == 'AgricSci') {
            $scope.headings = $scope.getHeaders.agricsci;
            $scope.yrpick = $scope.getHeaders.agricsci.yrpick;
            $rootScope.agricsci_selected_year = $scope.getHeaders.agricsci.yrpick;

            $scope.q1 = {
                title: 'Part 1 - Theory Questions',
                desc: 'This Part Contains Questions in a Story Section, a Comprehension Section, and a Summary Section. Answer all Questions Available.',
                allottime: '1 hr 30 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'ssceagricsciatemplate',
                href2: 'ssceagricsciatemplatepast'
            };

            $scope.q2 = {
                title: 'Part 2 - Objective Test Questions',
                desc: 'This Part Contains a Total of 100 Questions in Multiple Sections. Answer All Questions in Each Section.',
                allottime: '2 hrs 25 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'ssceagricscibtemplate',
                href2: '/ssceagricscibtemplatepast'
            };            
        } else if($rootScope.currentSubject == 'Commerce') {
            $scope.headings = $scope.getHeaders.commerce;
            $scope.yrpick = $scope.getHeaders.commerce.yrpick;
            $rootScope.commerce_selected_year = $scope.getHeaders.commerce.yrpick;

            $scope.q1 = {
                title: 'Part 1 - Theory Questions',
                desc: 'This Part Contains Questions in a Story Section, a Comprehension Section, and a Summary Section. Answer all Questions Available.',
                allottime: '1 hr 30 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscecommerceatemplate',
                href2: 'sscecommerceatemplatepast'
            };

            $scope.q2 = {
                title: 'Part 2 - Objective Test Questions',
                desc: 'This Part Contains a Total of 100 Questions in Multiple Sections. Answer All Questions in Each Section.',
                allottime: '2 hrs 25 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscecommercebtemplate',
                href2: '/sscecommercebtemplatepast'
            };            
        } else if($rootScope.currentSubject == 'Biology') {
            $scope.headings = $scope.getHeaders.biology;
            $scope.yrpick = $scope.getHeaders.biology.yrpick;
            $rootScope.biology_selected_year = $scope.getHeaders.biology.yrpick;

            $scope.q1 = {
                title: 'Part 1 - Theory Questions',
                desc: 'This Part Contains Questions in a Story Section, a Comprehension Section, and a Summary Section. Answer all Questions Available.',
                allottime: '1 hr 30 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscebiologyatemplate',
                href2: 'sscebiologyatemplatepast'
            };

            $scope.q2 = {
                title: 'Part 2 - Objective Test Questions',
                desc: 'This Part Contains a Total of 100 Questions in Multiple Sections. Answer All Questions in Each Section.',
                allottime: '2 hrs 25 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscebiologybtemplate',
                href2: '/sscebiologybtemplatepast'
            };            
        } else if($rootScope.currentSubject == 'Government') {
            $scope.headings = $scope.getHeaders.government;
            $scope.yrpick = $scope.getHeaders.government.yrpick;
            $rootScope.government_selected_year = $scope.getHeaders.government.yrpick;

            $scope.q1 = {
                title: 'Part 1 - Theory Questions',
                desc: 'This Part Contains Questions in a Story Section, a Comprehension Section, and a Summary Section. Answer all Questions Available.',
                allottime: '1 hr 30 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscegovernmentatemplate',
                href2: 'sscegovernmentatemplatepast'
            };

            $scope.q2 = {
                title: 'Part 2 - Objective Test Questions',
                desc: 'This Part Contains a Total of 60 Objjective Test Questions. Answer All Questions in this Section.',
                allottime: '2 hrs 25 mins.',
                btn1lbl: 'Start Examination',
                btn2lbl: 'View Past Examinations',
                href1: 'sscegovernmentbtemplate',
                href2: '/sscegovernmentbtemplatepast'
            };            
        };

        $scope.intab = function() {
            console.log('Now in the SSCE Template page!');
        };

        $scope.intab();

        $timeout(function(){
           HeaderService.setTab(1);
        }, 100);  

        // $scope.yrslist = ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'];

        $scope.yrclick = function(yr) {
            console.log('Year clicked is: ' + yr);
            if($rootScope.currentSubject == 'Economics') {
                $rootScope.economics_selected_year = yr;
            } else if($rootScope.currentSubject == 'Physics') {
                $rootScope.physics_selected_year = yr;
            } else if($rootScope.currentSubject == 'English') {
                $rootScope.english_selected_year = yr;
            } else if($rootScope.currentSubject == 'Chemistry') {
                $rootScope.chemistry_selected_year = yr;
            } else if($rootScope.currentSubject == 'Geography') {
                $rootScope.geography_selected_year = yr;
            } else if($rootScope.currentSubject == 'Mathematics') {
                $rootScope.mathematics_selected_year = yr;
            } else if($rootScope.currentSubject == 'AgricSci') {
                $rootScope.agricsci_selected_year = yr;
            } else if($rootScope.currentSubject == 'Government') {
                $rootScope.government_selected_year = yr;
            } else if($rootScope.currentSubject == 'Commerce') {
                $rootScope.commerce_selected_year = yr;
            } else if($rootScope.currentSubject == 'Biology') {
                $rootScope.biology_selected_year = yr;
            } else if($rootScope.currentSubject == 'Literature in English') {
                $rootScope.litineng_selected_year = yr;
            }
            $scope.yrpick = yr;
        };

        $scope.gotoparta = function(url) {
            console.log('The section clicked has url: ' + url);
            $scope.logEvent();
            $location.path($rootScope.baseRoute + url);
        };

        $scope.gotopartb = function(url) {
            console.log('The section clicked has url: ' + url);
            $scope.logEvent();
            $location.path($rootScope.baseRoute + url);
        };
        

    }
})();

(function() {
    'use strict';

    angular
        .module('ssceexamsuiApp')
        .controller('TestcenterController', TestcenterController);

    // TestcenterController.$inject = ['$scope', '$log', '$location', '$controller', '$rootScope', 'ConfigService', 'ApiService', 'HeaderService', 'growl', '$timeout'];

    /* @ngInject */
    function TestcenterController($scope, $log, $location, $controller, $rootScope, ConfigService, ApiService, HeaderService, growl, $timeout, LoggingService) {

        $controller('BaseController', {$scope: $scope});
        $rootScope.baseRoute = '';
        var baseRoute = '';
        
        $scope.logEvent = function() {
            LoggingService.postTrack('{tc,' + $scope.userid + ',' + $rootScope.currentSubject + ',' + new Date().getTime() + '}');
        };

        $scope.inTestcenter = function() {
            console.log('Now in the Testcenter page!');
        };

        $scope.setRealtimeScore = function() {
          console.log('$scope.setRealtimeScore() called!');
          $('#rtscore').prop('checked', !$('#rtscore').prop('checked'));
          $rootScope.rtscore = $('#rtscore').prop('checked');
        };

        $scope.continueExams = function() {
          console.log('You have selected to continue saved exams.');
          $scope.svdexmmodal.modalShown = true;
        };

        $scope.svdexmCount = 3;
        $scope.svdexmmodal = {
            modalShown: false
        };

        $scope.inTestcenter();

        $timeout(function(){
           HeaderService.setTab(1);
           if($rootScope.rtscore==true) { 
            $('#rtscore').prop('checked', true);
           } else {
            $('#rtscore').prop('checked', false);
           }
        }, 100);

        $scope.gotoExam = function(subj, url) {
            $rootScope.currentSubject = subj;
            console.log('Sscetemplate link for ' + subj + ' clicked!');
            console.log('baseRoute + url is: ' + baseRoute + url);
            $scope.logEvent();
            $location.path(baseRoute + url);
        };

        $scope.examsubjects = [
          {
            name: 'Physics',
            image: 'physics.png',
            href: 'sscetemplate',
            examlist: ['SSCE','GCE','NECO'],
            availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
            bgcolor: '#F4F6F6'
          },
          {
            name: 'Chemistry',
            image: 'chemistry.png',
            href: 'sscetemplate',
            examlist: ['SSCE','GCE','NECO'],
            availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
            bgcolor: '#F4F6F6'
          },
          {
            name: 'Mathematics',
            image: 'genmaths.png',
            href: 'sscetemplate',
            examlist: ['SSCE','GCE','NECO'],
            availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
            bgcolor: '#F4F6F6'
          },
          {
            name: 'Economics',
            image: 'economics.png',
            href: 'sscetemplate',
            examlist: ['SSCE','GCE','NECO'],
            availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
            bgcolor: '#F4F6F6'
          },
          {
            name: 'Biology',
            image: 'biology.png',
            href: 'sscetemplate',
            examlist: ['SSCE','GCE','NECO'],
            availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
            bgcolor: '#F4F6F6'
          },
          {
            name: 'English',
            image: 'english.png',
            href: 'sscetemplate',
            examlist: ['SSCE','GCE','NECO'],
            availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
            bgcolor: '#F4F6F6'
          },
          {
            name: 'Geography',
            image: 'geography.png',
            href: 'sscetemplate',
            examlist: ['SSCE','GCE','NECO'],
            availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
            bgcolor: '#F4F6F6'
          },
          {
            name: 'Literature in English',
            image: 'literature.png',
            href: 'sscetemplate',
            examlist: ['SSCE','GCE','NECO'],
            availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
            bgcolor: '#F4F6F6'
          },
          {
            name: 'Commerce',
            image: 'commerce.png',
            href: 'sscetemplate',
            examlist: ['SSCE','GCE','NECO'],
            availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
            bgcolor: '#F4F6F6'
          },
          {
            name: 'AgricSci',
            image: 'agriculture.png',
            href: 'sscetemplate',
            examlist: ['SSCE','GCE','NECO'],
            availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
            bgcolor: '#F4F6F6'
          },
          {
            name: 'Government',
            image: 'government.png',
            href: 'sscetemplate',
            examlist: ['SSCE','GCE','NECO'],
            availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
            bgcolor: '#F4F6F6'
          }
          // {
          //   name: 'Mathematics',
          //   image: 'genmaths.png',
          //   href: 'jamb_genmaths',
          //   examlist: ['JAMB'],
          //   availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
          //   bgcolor: '#A9CCE3'
          // },
          // {
          //   name: 'Physics',
          //   image: 'physics.png',
          //   href: 'jamb_physics',
          //   examlist: ['JAMB'],
          //   availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
          //   bgcolor: '#A9CCE3'
          // },
          // {
          //   name: 'Chemistry',
          //   image: 'chemistry.png',
          //   href: 'jamb_chemistry',
          //   examlist: ['JAMB'],
          //   availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
          //   bgcolor: '#A9CCE3'
          // },
          // {
          //   name: 'Biology',
          //   image: 'biology.png',
          //   href: 'jamb_biology',
          //   examlist: ['JAMB'],
          //   availyears: ['1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015'],
          //   bgcolor: '#A9CCE3'
          // }
        ];

    }
})();
(function() {
  'use strict';

  ssceexamsuiApp
    .directive('examScore', function () {
        return {
            restrict: 'E',
            replace: true,
            templateUrl: 'partials/ExamScore.html',
            controller: function($scope) {
                $scope.subjj = $scope.subjj;
                // console.log('subjj is: ');
                // console.log($scope.subjj);

                $scope.closeme = function (val) {
                    // console.log("val is: " + val);
                    $('#hideme' + val + '').hide("slow");
                    $('#' + val + '').hide("slow");
                };
            },
            scope: {
                subjj: '=',
                indx: '='
            }
        };
    });    
})();

(function() {
  'use strict';

  ssceexamsuiApp
    .directive('fileInput', ['$parse'], function ($parse) {
        return {
            restrict: 'A',
            link: function(scope, elm, attrs) {
                elm.bind('change', function() {
                    $parse(attrs.fileinput).assign(scope, elm[0].files);
                    scope.$apply();
                });
            }
            
        };
    });    
})();

(function() {
  'use strict';

  ssceexamsuiApp
    .directive('mockFooter', function () {
        return {
            restrict: 'EA',
            replace: true,
            templateUrl: 'partials/MockFooter.html',
            scope: {
                'text': '@'
            },
            link: function (scope, element, attrs) {
                element.button();
                scope.$watch('text', function (value) {
                    element.button('option', 'label', value);
                });
            }
        };
    });
    
})();

(function() {
  'use strict';

  ssceexamsuiApp
    .directive('mockHeader', function () {
        return {
            restrict: 'EA',
            replace: true,
            templateUrl: 'partials/MockHeader.html',
            controller: function($scope) {

            },
            scope: {
                'text': '@'
            },
            link: function (scope, element, attrs) {
                element.button();
                scope.$watch('text', function (value) {
                    element.button('option', 'label', value);
                });
            }
        };
    });
    
})();

(function() {
  'use strict';

  ssceexamsuiApp
    .directive('recentExam', function () {
        return {
            restrict: 'E',
            replace: true,
            templateUrl: 'partials/RecentExam.html',
            controller: function($scope) {
                $scope.attn = $scope.attn[0];
                console.log('attn is: ');
                console.log($scope.attn);

                // $scope.closemee = function (val) {
                //     // console.log("val is: " + val);
                //     $('#analy' + val + '').hide("slow");
                // };
            },
            scope: {
                attn: '=',
                indx: '='
            }
        };
    });    
})();

ssceexamsuiApp.directive('tabbedNav', function () {
    return {
        restrict: 'EA',
        replace: true,
        transclude: true,
        templateUrl: 'templates/directives/MyTabsDirective.html'
    };
});
(function() {
  'use strict';

  ssceexamsuiApp
    .directive('topRow', function () {
        return {
            restrict: 'E',
            replace: true,
            templateUrl: 'partials/TopRow.html',
            controller: function($scope) {
                $scope.rowt = $scope.toproww[$scope.indx];
                // console.log('toproww is: ');
                // console.log($scope.toproww);

                $scope.closemee = function (val) {
                    // console.log("val is: " + val);
                    $('#analy' + val + '').hide("slow");
                };
            },
            scope: {
                toproww: '=',
                indx: '='
            }
        };
    });    
})();

(function() {
	'use strict';

	angular
        .module('ssceexamsuiApp')
		.factory('ApiService', ApiService);

		// ApiService.$inject = ['$http', '$q', 'growl', '$rootScope', 'window'];

		/* @ngInject */
		function ApiService($http, $q, growl, $rootScope, window, ConfigService) {
			
			return {
				getPhysicsSectionA: getPhysicsSectionA,
				getPhysicsSectionB: getPhysicsSectionB,
				getEnglishSectionB: getEnglishSectionB,
				getEconomicsSectionB: getEconomicsSectionB,
				getGeographySectionB: getGeographySectionB,
				getMathematicsSectionB: getMathematicsSectionB,
				getAgricSciSectionB: getAgricSciSectionB,
				getGovernmentSectionB: getGovernmentSectionB,
				getCommerceSectionB: getCommerceSectionB,
				getBiologySectionB: getBiologySectionB,
				getLitInEngSectionB: getLitInEngSectionB,
				getChemistrySectionB: getChemistrySectionB,
				newUser: newUser,
				getUsers: getUsers,
				getUserById: getUserById,
				getUserByUnameAndPwd: getUserByUnameAndPwd,
				putUser: putUser,
				deleteUser: deleteUser,
				getAnalyticsdata: getAnalyticsdata,
				chart1Update: chart1Update,
				chart2Update: chart2Update,
				chart3Update: chart3Update,
				chart4Update: chart4Update,
				chart5Update: chart5Update,
				chart6Update: chart6Update,
				sendContactInfo: sendContactInfo,
				registerUser: registerUser,
				forgotpwdUser: forgotpwdUser,
				confirmUpgrade: confirmUpgrade,
				registerSchool: registerSchool,
				postImage: postImage,
				editUserProfile: editUserProfile,
				editUserSchoolProfile: editUserSchoolProfile
			};

			function httpPromise (vobj) {
				console.log('vobj.url is: ' + vobj.url);
				var deferred = $q.defer();
				$http(vobj)
					.success(function(response) {
						deferred.resolve(response);
					})
					.error(function() {
						deferred.reject();
					});
				return deferred.promise;
			};

			function getUsers() {
				console.log('calling the getUsers data');
				var vObj = {
	            	method: 'GET',
                    url: ConfigService.getapi() + '/api/users',
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function postImage(val) {
				console.log('Now in ApiService.postImage()');
				console.log(val.fd);
				var deferred = $q.defer();
				$http.post(ConfigService.getapi() + '/api/postimage', val.fd, {
					transformRequest: angular.identity,
					headers: {
                        'Content-Type': undefined,//'multipart/form-data',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
				})
				.success(function(response) {
						deferred.resolve(response);
					})
					.error(function() {
						deferred.reject();
					});
				return deferred.promise;
			};

			function editUserProfile(val) {
				console.log('edited user profile details for user ' + val.userid + ' is: ');
				console.log(val.userdetails);
				var vObj = {
	            	method: 'POST',
                    url: ConfigService.getapi() + '/api/editUserProfile',
                    data: val,
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function editUserSchoolProfile(val) {
				console.log('edited school profile details for user ' + val.userid + ' is: ');
				console.log(val.schdetails);
				var vObj = {
	            	method: 'POST',
                    url: ConfigService.getapi() + '/api/editUserSchoolProfile',
                    data: val,
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function registerSchool(schappdetails) {
				console.log('school application details: ');
				console.log(schappdetails);
				var vObj = {
	            	method: 'POST',
                    url: ConfigService.getapi() + '/api/registerSchool',
                    data: schappdetails,
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function forgotpwdUser(userdetails) {
				console.log('password recovery for user with details: ');
				console.log(userdetails);
				var vObj = {
	            	method: 'POST',
                    url: ConfigService.getapi() + '/api/forgotpwdUser',
                    data: userdetails,
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			
			function confirmUpgrade(userid, upgradetype) {
				console.log('confirm ' + upgradetype + ' for user: ' + userid);
				var vObj = {
	            	method: 'POST',
                    url: ConfigService.getapi() + '/api/confirmUpgrade',
                    data: {
                    	uname: userid,
                    	upgradetype: upgradetype
                    },
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function registerUser(userdetails) {
				console.log('registering new user with details: ');
				console.log(userdetails);
				var vObj = {
	            	method: 'POST',
                    url: ConfigService.getapi() + '/api/registeruser',
                    data: userdetails,
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function sendContactInfo(msg) {
				console.log('sending the Contact Us form data: ');
				console.log(msg);
				var vObj = {
	            	method: 'POST',
                    url: ConfigService.getapi() + '/api/contactus',
                    data: msg,
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function getAnalyticsdata(userid) {
				console.log('calling the getAnalyticsdata with user: ' + userid);
				var vObj = {
	            	method: 'GET',
                    url: ConfigService.getapi() + '/api/getanalyticsdata/' + userid,
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            // console.log(vObj);
	            return httpPromise(vObj);
			};

			function chart1Update(mth, yr, userid) {
				console.log('POSTing the chart1Update');
				var vObj = {
	            	method: 'POST',
                    url:ConfigService.getapi() + '/api/analytics/chart1',
                    data: {
                    	mth: mth,
                    	yr: yr,
                    	userid: userid
                    },
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function chart2Update(subj, yr, userid) {
				console.log('POSTing the chart2Update');
				var vObj = {
	            	method: 'POST',
                    url: ConfigService.getapi() + '/api/analytics/chart2/',                   
                    data: {
                    	subj: subj,
                    	yr: yr,
                    	userid: userid
                    },
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function chart3Update(yr, userid) {
				console.log('POSTing the chart3Update');
				var vObj = {
	            	method: 'POST',
                    url: ConfigService.getapi() + '/api/analytics/chart3',
                    data: {
                    	yr: yr,
                    	userid: userid
                    },
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function chart4Update(topnum, userid) {
				console.log('POSTing the chart4Update');
				var vObj = {
	            	method: 'POST',
                    url: ConfigService.getapi() + '/api/analytics/chart4',                  
                    data: {
                    	topnum: topnum,
                    	userid: userid
                    },
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function chart5Update(subj, userid) {
				console.log('POSTing the chart5Update');
				var vObj = {
	            	method: 'POST',
                    url: ConfigService.getapi() + '/api/analytics/chart5',                   
                    data: {
                    	subj: subj,
                    	userid: userid
                    },
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function chart6Update(subj, userid) {
				console.log('POSTing the chart6Update');
				var vObj = {
	            	method: 'POST',
                    url: ConfigService.getapi() + '/api/analytics/chart6',                   
                    data: {
                    	subj: subj,
                    	userid: userid
                    },
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function getUserById(id) {
				console.log('calling the getUser data: ' + id);
				var vObj = {
	            	method: 'GET',
                    url: ConfigService.getapi() + '/api/user?id=' + id,
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function getUserByUnameAndPwd(uname, pwd) {
				console.log('calling the getUserByUnameAndPwd for username: ' + uname + ', password: ' + pwd);
				var vObj = {
	            	method: 'GET',
                    url: ConfigService.getapi() + '/api/user?name=' + uname + '&password=' + pwd,
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function putUser(id, name) {
				console.log('calling the putUser, id: ' + id + ', name: ' + name);
				var vObj = {
	            	method: 'PUT',
                    url: ConfigService.getapi() + '/api/user?id=' + id,                    
                    data: {
                    	name: name
                    },
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function newUser() {
				console.log('POSTing the newUser');
				var vObj = {
	            	method: 'POST',
                    url: ConfigService.getapi() + '/api/user',                    
                    data: {
                    	name: "here"
                    },
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function deleteUser(id) {
				console.log('calling the deleteUser data: ' + id);
				var vObj = {
	            	method: 'DELETE',
                    url: ConfigService.getapi() + '/api/user?id=' + id,
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Authorization': $rootScope.token || window.sessionStorage.act
                    }
	            };
	            return httpPromise(vObj);
			};

			function getObjYrJson(subj, yr) {
				console.log('calling the getObjYrJson data, subj: ' + subj + ', year: ' + yr + '.');
				var vObj = {
	            	method: 'GET',
                    url: '/' + subj + '/' + yr + '',
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        // 'Authorization': $rootScope.token || window.sessionStorage.act
                    },
                    cache: true
	            };
	            return httpPromise(vObj);
			};

			function getPhysicsSectionA(val) {
				console.log('Year selected is: ' + val);
				var vObj = {
		            "Q1": {
		                "a": {
		                    "q0": "(a) Explain with the aid of a diagram what is meant by the moment of a force about a point,"
		                },
		                "b": {
		                    "q0": "(b) State the conditions of equilibrium for a number of coplana parallel forces. A metre rule is found to balance at the 48 cm mark. When a body of mass 60g is suspended at the 6cm mark the balance point is found to be at the 30 cm mark. Calculate",
		                    "q1": "(i) the mass of the metre rule",
		                    "q2": "(ii) the distance of the balance point from the zero end, if the body were moved to the 13cm mark,"
		                },
		                "c": {
		                    "q0": "(c) Show that the efficiency E, the force ratio M.A. and the velocity ratio V.R of a machine are related by the equation.",
		                    "q1": "E = (M.A x 100%)/V.R",
		                    "q2": "The efficiency of a machine is 80%. Determine the work done by a person using this machine to raise a load of 200kg through a vertical distance of 3.0 m (Take g = 10 ms^2)."
		                }
		            },
		            "Q2": {
		                "a": {
		                    "q0": "(a) Draw a labelled diagram of a vacuum flask. Explain how its construction minimizes heat exchange with the surroundings,"
		                },
		                "b": {
		                    "q0": "(b) State Boyle’s law. A thread of mercury of length 15cm is used to trap some air in a capillary tube with uniform cross-sectional area and closed at one end with the tube vertical and the open end uppermost, the length of the trapped air column is 20 cm. Calculate the length of the air column when the tube is held: ",
		                    "q1": "(i) horizontally, ",
		                    "q2": "(ii) vertically with the open end underneath. (Atmospheric pressure = 76 cm of mercury),"
		                },
		                "c": {
		                    "q0": "(c) Explain why it is not advisable to sterilize a clinical thermometer in boiling water at normal atmospheric pressure."
		                }
		            },
		            "Q3": {
		                "a": {
		                    "q0": "(a) Explain with the aid of a diagram how a converging lens could be used to: ",
		                    "q1": "(i) ignite a piece of carbon paper,",
		                    "q2": "(ii) produce an enlarged picture on a screen,",
		                    "q3": "(iii) correct an eye defect,"
		                },
		                "b": {
		                    "q0": "(b) What is a mechanical wave? Describe with the aid of a diagram, an experiment to show that sound needs a material medium for transmission. State three characteristics of sound and mention the factor on which each depends."
		                }
		            },
		            "Q4": {
		                "a": {
		                    "q0": "(a) Explain what is meant by: ",
		                    "q1": "(i) electric field intensity,",
		                    "q2": "(ii) electric lines of force,"
		                },
		                "b": {
		                    "q0": "(b) Two similar but opposite point charges - q and + q each of magnitude 5.0 x 10' 8C are separated by a distance of 8.0cm in vacuum as shown in the diagram below.",
		                    "q1": "img**phys_1998_sectiona_qst4_b_1.jpg",
		                    "q2": "Calculate the magnitude and direction of the resultant electric field intensity E at the point P. Draw the lines of force due to this system of charges.",
		                    "q3": "Take 1/(4ml) = 9 x 10 NmC"
		                },
		                "c": {
		                    "q0": "(c) Calculate the following in the series circuit shown above: ",
		                    "q1": "(i) reactance of the capacitor,",
		                    "q2": "(ii) impedance of the circuit,",
		                    "q3": "(iii) current through the circuit,",
		                    "q4": "(iv) voltage across the capacitor,",
		                    "q5": "(v) average power used in the circuit.",
		                    "q6": "img**phys_1998_sectiona_qst4_c_1.jpg"
		                    // "q7": "/img/physics/myimage.jpg"
		                }
		            }
		        };
				return vObj;
			};

			function getAgricSciSectionB(val) {
				console.log('AgricSci Year selected is: ' + val);

				if(val == 1988) {
		        	return getObjYrJson('agricsci', '1988'); 
		        }	        
		        else if(val == 1989) { 
		        	return getObjYrJson('agricsci', '1989'); 
		        }
		        else if(val == 1990) { 
		        	return getObjYrJson('agricsci', '1990'); 
		        }
		        else {
		        	return getObjYrJson('agricsci', '1988'); 
		        }
			};

			function getMathematicsSectionB(val) {
				console.log('Mathematics Year selected is: ' + val);

				if(val == 1988) {
		        	return getObjYrJson('maths', '1988');
		        }	        
		        else if(val == 1989) { 
		        	return getObjYrJson('maths', '1989');
		        }
		        else if(val == 1990) { 
		        	return getObjYrJson('maths', '1990');
		        }
		        else {
		        	return getObjYrJson('maths', '1988');
		        }
			};

			function getGeographySectionB(val) {
				console.log('Geography Year selected is: ' + val);

		        if(val == 1988) {
		        	return getObjYrJson('geography', '1988');
		        }	        
		        else if(val == 1989) { 
		        	return getObjYrJson('geography', '1989');
		        }
		        else if(val == 1990) { 
		        	return getObjYrJson('geography', '1990');
		        }
		        else {
		        	return getObjYrJson('geography', '1988');
		        }
			};

			function getEconomicsSectionB(val) {
				console.log('Economics Year selected is: ' + val);

		        if(val == 1988) {
		        	return getObjYrJson('econ', '1988'); 
		        }	        
		        else if(val == 1989) { 
		        	return getObjYrJson('econ', '1989'); 
		        }
		        else if(val == 1990) { 
		        	return getObjYrJson('econ', '1990'); 
		        }
		        else {
		        	return getObjYrJson('econ', '1988'); 
		        }
			};

			function getEnglishSectionB(val) {
				console.log('English Year selected is: ' + val);

		        if(val == 1988) {
		        	return getObjYrJson('english', '1988'); 
		        }	        
		        else if(val == 1989) { 
		        	return getObjYrJson('english', '1989');
		        }
		        else if(val == 1990) { 
		        	return getObjYrJson('english', '1990');
		        }
		        else {
		        	return getObjYrJson('english', '1988');
		        }
			};

			function getPhysicsSectionB(val) {
				console.log('Physics Year selected is: ' + val);

		        if(val == 1988) {
		        	return getObjYrJson('physics', '1988'); 
		        }	        
		        else if(val == 1989) { 
		        	return getObjYrJson('physics', '1989');
		        }
		        else if(val == 1990) { 
		        	return getObjYrJson('physics', '1990');
		        }
		        else if(val == 1991) { 
		        	return getObjYrJson('physics', '1991');
		        }	        
		        else if(val == 1992) { 
		        	return getObjYrJson('physics', '1992');
		        }
		        else if(val == 1993) { 
		        	return getObjYrJson('physics', '1993');
		        }
		        else if(val == 1994) { 
		        	return getObjYrJson('physics', '1994');
		        }	        
		        else if(val == 1995) { 
		        	return getObjYrJson('physics', '1995');
		        }
		        else if(val == 1996) { 
		        	return getObjYrJson('physics', '1996');
		        }
		        else if(val == 1997) { 
		        	return getObjYrJson('physics', '1997');
		        }	        
		        else if(val == 1998) { 
		        	return getObjYrJson('physics', '1998');
		        }
		        else if(val == 1999) { 
		        	return getObjYrJson('physics', '1999');
		        }
		        else if(val == 2000) { 
		        	return getObjYrJson('physics', '2000');
		        }
		        else {
		        	return getObjYrJson('physics', '1988');
		        }
			};

			function getGovernmentSectionB(val) {
				console.log('Government Year selected is: ' + val);

		        if(val == 1988) {
		        	return getObjYrJson('govt', '1988'); 
		        }	        
		        else if(val == 1989) { 
		        	return getObjYrJson('govt', '1989'); 
		        }
		        else if(val == 1990) { 
		        	return getObjYrJson('govt', '1990'); 
		        }
		        else {
		        	return getObjYrJson('govt', '1988');
		        }
			};

			function getCommerceSectionB(val) {
				console.log('Commerce Year selected is: ' + val);

		        if(val == 1988) {
		        	return getObjYrJson('commerce', '1988'); 
		        }	        
		        else if(val == 1989) { 
		        	return getObjYrJson('commerce', '1989'); 
		        }
		        else if(val == 1990) { 
		        	return getObjYrJson('commerce', '1990'); 
		        }
		        else if(val == 1991) { 
		        	return getObjYrJson('commerce', '1991'); 
		        }
		        else {
		        	return getObjYrJson('commerce', '1989');
		        }
			};

			function getBiologySectionB(val) {
				console.log('Biology Year selected is: ' + val);

		        if(val == 1988) {
		        	return getObjYrJson('biology', '1988'); 
		        }	        
		        else if(val == 1989) { 
		        	return getObjYrJson('biology', '1989'); 
		        }
		        else {
		        	return getObjYrJson('biology', '1988');
		        }
			};
			
			function getLitInEngSectionB(val) {
				console.log('LitInEng Year selected is: ' + val);

		        if(val == 1988) {
		        	return getObjYrJson('LitInEng', '1988'); 
		        }
		        else {
		        	return getObjYrJson('LitInEng', '1988');
		        }
			};

			function getChemistrySectionB(val) {
				console.log('Chemistry Year selected is: ' + val);

		        if(val == 1988) {
		        	return getObjYrJson('chemistry', '1988'); 
		        }	        
		        else if(val == 1989) { 
		        	return getObjYrJson('chemistry', '1989'); 
		        }
		        else if(val == 1990) { 
		        	return getObjYrJson('chemistry', '1990'); 
		        }
		        else if(val == 1991) { 
		        	return getObjYrJson('chemistry', '1991');
		        }	        
		        else if(val == 1992) { 
		        	return getObjYrJson('chemistry', '1992');
		        }
		        else if(val == 1993) { 
		        	return getObjYrJson('chemistry', '1993');
		        }
		        else if(val == 1994) { 
		        	return getObjYrJson('chemistry', '1994');
		        }	        
		        else if(val == 1995) { 
		        	return getObjYrJson('chemistry', '1995');
		        }
		        else if(val == 1996) { 
		        	return getObjYrJson('chemistry', '1996');
		        }
		        else if(val == 1997) { 
		        	return getObjYrJson('chemistry', '1997');
		        }	        
		        else if(val == 1998) { 
		        	return getObjYrJson('chemistry', '1998');
		        }
		        else if(val == 1999) { 
		        	return getObjYrJson('chemistry', '1999');
		        }
		        else if(val == 2000) { 
		        	return getObjYrJson('chemistry', '2000');
		        }
		        else {
		        	return getObjYrJson('chemistry', '1988');
		        }
			};
		}
})();
(function() {
	'use strict';

	angular
        .module('ssceexamsuiApp')
		.factory('AuthService', AuthService);

		// AuthService.$inject = ['$http', '$q', 'growl', '$rootScope', 'window', 'ConfigService'];

		/* @ngInject */
		function AuthService($http, $q, growl, $rootScope, window, ConfigService) {
			
			return {
				postLoginForm: postLoginForm,
				setUserId: setUserId
			};

			function httpPromise (vobj) {
				var deferred = $q.defer();
				$http(vobj)
					.success(function(response) {
						deferred.resolve(response);
					})
					.error(function() {
						deferred.reject();
					});
				return deferred.promise;
			};

			function postLoginForm(val) {
				console.log('calling postLoginForm... with ' + val.uname + ', ' + val.pwd + '.');
				var vObj = {
	            	method: 'POST',
	                url: ConfigService.getapi() + '/api/authenticate',
	                data: {
	                	name: val.uname,
	                	pwd: val.pwd
	                },
	                headers: {
	                    'Content-Type': 'application/json'
	                    // 'Authorization': $rootScope.token || window.sessionStorage.act
	                }
	            };
	            return httpPromise(vObj);
			};

			function setUserId(urlpath) {
				console.log('ConfigService.getApiBaseRoute is: ' + ConfigService.getApiBaseRoute());
				// urlBase = location.origin;//'https://beep.com:10443/';
				var vObj = {
	            	method: 'GET',
	                url: urlpath,
	                headers: {
	                    'Content-Type': 'application/json;charset=UTF-8'
	                    // 'Authorization': $rootScope.token || window.sessionStorage.act
	                }
	            };
	            return httpPromise(vObj);
			};
		}
})();		
(function() {
	'use strict';

	angular
        .module('ssceexamsuiApp')
		.factory('ConfigService', ConfigService);

		// ConfigService.$inject = ['$rootScope'];
		var urlPath = '../getUser.json';

		/* @ngInject */
		function ConfigService($rootScope) {

			return {
				getapi: getapi,
				setUrl: setUrl,
				getApiBaseRoute: getApiBaseRoute,
				getUserId: getUserId,
				getUrlPath: getUrlPath
			};

			function getapi() {;
				return 'http://34.225.120.20:8066';
			};

			function setUrl(val) {
				var devurlset = 'http://10.255.211.124:6045';
				var qaurlset = 'https://150.250.242.52:6040';
				var qaapiset = 'http://150.250.242.52:36095';

				if(val === 'dev') {
					$rootScope.url = devurlset;
				} else if(val === 'qa') {
					$rootScope.url = qaurlset;
				} else {
					return devurlset;
				}

				return $rootScope.url;
			}

			function getApiBaseRoute() {
				var nonWsealApi = 'http://10.255.211.124:37021/';
				if (($(location).attr('href').search('localhost:8030')) !== -1) {
					$rootScope.baseApiRoute = nonWsealApi;
				} else if(($(location).attr('href').search($rootScope.junctionpath)) !== -1) {
					// console.log('Found the Wseal Route...');
					$rootScope.baseApiRoute = 'https://' + location.host + '/' + $rootScope.junctionpath + '/';
				} else {
					$rootScope.baseApiRoute = nonWsealApi;
				}

				return $rootScope.baseApiRoute;        
            }

	        function getUserId() {
	        	return $rootScope.userId;
	        }

	        function getUrlPath() {
	        	return urlPath;
	        }
		}
})();

(function() {
	'use strict';

	angular
        .module('ssceexamsuiApp')
		.factory('$exceptionHandler', function() {
			return function (exception) {
				console.log("exception handled: " + exception.message);
			}
		});

})();

(function() {
	'use strict';

	angular
        .module('ssceexamsuiApp')
		.factory('HeaderService', HeaderService);

		// HeaderService.$inject = ['window'];

		/* @ngInject */
		function HeaderService(window) {

			return {
				getTab: getTab,
				setTab: setTab
			};

			function getTab() {
				console.log('getTab is called.');
			};

			function setTab(val) {
				// console.log('setTab is called with val = ' + val);
				for(var ln=0;ln<$('#righttray ul li').length;ln++) {
					if(ln != val) {
						$('#righttray ul li:eq(' + ln + ')').removeClass('active');
					} else {
						$('#righttray ul li:eq(' + val + ')').addClass('active');
					}
	            }
			};	
		}
})();

(function() {
	'use strict';

	angular
        .module('ssceexamsuiApp')
		.factory('LoggingService', LoggingService);

		// LoggingService.$inject = ['window'];

		/* @ngInject */
		function LoggingService($http, $q, growl, $rootScope, window) {

			// var LoggingAPI = 'http://192.168.1.144:8066';
			// var LoggingAPI = 'localhost:8066';

			return {
				postTrack: postTrack
			};

			function httpPromise (vobj) {
				var deferred = $q.defer();
				$http(vobj)
					.success(function(response) {
						deferred.resolve(response);
					})
					.error(function() {
						deferred.reject();
					});
				return deferred.promise;
			};

			function getDate() {
				var myDate = new Date();
				return (myDate.getMonth() + 1) + ":" +
					 myDate.getDate() + ":" + 
					 myDate.getFullYear() + ':' + 
					 myDate.getHours() + ":" + 
					 myDate.getMinutes() + ":" + 
					 myDate.getSeconds() + ":" + 
					 myDate.getMilliseconds() + ';';
			};

			function postTrack(val) {
				// if(window.localStorage.track) {
				// 	console.log('window.localStorage.track is: ' + window.localStorage.track);
				// 	var old = window.localStorage.track;
				// 	window.localStorage.track = old + val;

				// 	if ((window.localStorage.track.split('}{')).length > 4) {
				// 		console.log("Sending this to the external Tracking Data Ingestor service = " + (window.localStorage.track.split('}{')).length + ".");
				// 		ingestLogs(window.localStorage.track);
				// 		clearTrack();
				// 	}
				// } else {
				// 	window.localStorage.track = val;
				// }
			};

			function ingestLogs(ulogs) {
				console.log('Ingesting logs: ' + ulogs);
				console.log("calling: " + $rootScope.theAPI + '/api/ingestlogs');
				console.log('theeAPI is: ' + theeAPI);
				window.localStorage.track = '-';
				var vObj = {
	            	method: 'POST',
	                url: $rootScope.theAPI + '/api/ingestlogs',
	                data: {
	                	userid: '1452552',
	                    val: ulogs
	                },
	                headers: {
	                    'Content-Type': 'application/json',
	                    'Authorization': $rootScope.token || window.sessionStorage.act
	                }
	            };
	            return httpPromise(vObj);
			};

			function clearTrack() {
				console.log('calling clearTrack()...');
				window.localStorage.track = '';
			};
		}
})();
(function() {
	'use strict';

	angular
        .module('ssceexamsuiApp')
		.factory('SaveexamService', SaveexamService);

		// SaveexamService.$inject = ['window'];

		/* @ngInject */
		function SaveexamService(window) {

			return {
				saveExam: saveExam,
				getToken: getToken,
				setToken: setToken
			};

			function saveExam(val) {	
				console.log("val.exmid + val.examyear is: " + val.exmid + ", " + val.examyear);	
				if(val.exmid == 'phy_B') {
					if(val.examyear=='1988') {
						window.localStorage.svdPhyB1988 = val.tmlft + '-' + val.exmid + '-' + val.examyear+ '-' + val.dt + val.qArry;
            			window.sessionStorage.svdPhyB1988 = val.tmlft + '-' + val.exmid + '-' + val.examyear+ '-' + val.dt + val.qArry;
					} else if(val.examyear=='1989') {
						window.localStorage.svdPhyB1989 = val.tmlft + '-' + val.exmid + '-' + val.examyear+ '-' + val.dt + val.qArry;
            			window.sessionStorage.svdPhyB1989 = val.tmlft + '-' + val.exmid + '-' + val.examyear+ '-' + val.dt + val.qArry;
					} else if(val.examyear=='1990') {
						window.localStorage.svdPhyB1990 = val.tmlft + '-' + val.exmid + '-' + val.examyear+ '-' + val.dt + val.qArry;
            			window.sessionStorage.svdPhyB1990 = val.tmlft + '-' + val.exmid + '-' + val.examyear+ '-' + val.dt + val.qArry;
					}
				}
            };

			function getToken() {
				if(window.sessionStorage.act) {
					return window.sessionStorage.act;
				} else {
					return '';
				}
			};

			function setToken(val) {
				window.sessionStorage.act = val;
			};		
		}
})();

// })();

(function() {
	'use strict';

	angular
        .module('ssceexamsuiApp')
		.factory('TimerService', TimerService);

		// TimerService.$inject = ['window'];

		/* @ngInject */
		function TimerService(window) {

			return {
				getTime: getTime,
				gettimeLeft: gettimeLeft,
				getTL: getTL,
				getTimeSets: getTimeSets,
				getResult: getResult
			};

			function getTL(oldtime, totaltime) {
				console.log('inside getTL()');
				//return '' + (Math.floor(timepast/1000)%60) + '-' + (Math.floor(timepast/(60*1000))%60) + '-' + (Math.floor(timepast/(60*60*1000))%24) + '';
				return ((totaltime*60*1000) - (new Date().getTime() - oldtime));
			};

			function getResult(timepast) {
				var secss = Math.floor(timepast/1000)%60;
	            var minss = Math.floor(timepast/(60*1000))%60;
	            var hrss = Math.floor(timepast/(60*60*1000))%24;
	            // console.log('secss is: ' + secss);
	            // console.log('minss is: ' + minss);
	            // console.log('hrss is: ' + hrss);

	            return hrss + ' hrs ' + minss + ' mins ' + secss + ' secs';
			};

			function getTime(oldtime, totaltime) {
				console.log('getTime is called.');	
				// console.log('totaltime is: ' + totaltime);
				var timegone = new Date().getTime() - oldtime;
				var timeleft = (totaltime*60*1000) - timegone;
				var pctgone = (100*(timegone/(timegone + timeleft))).toFixed();

				// console.log('timegone is: ' + getResult(timegone));
				// console.log('timeleft is: ' + getResult(timeleft));
				// console.log('pctgone is: ' + pctgone + '%');

	            return [getResult(timegone), getResult(timeleft), pctgone];
			};

			function gettimeLeft() {
				if(window.sessionStorage.tmlft) {
					console.log('TimerService says: ' + window.sessionStorage.tmlft);
					return getTime(0, window.sessionStorage.tmlft);
				} else {
					console.log('TimerService says: 0');
					return '0';
				}				
			};

			function getTimeSets() {
				return [((5 * 60 * 1000) - window.sessionStorage.tmlft), window.sessionStorage.tmlft];
			};
		}
})();

(function() {
	'use strict';

	angular
        .module('ssceexamsuiApp')
		.factory('TokenService', TokenService);

		// TokenService.$inject = ['window'];

		/* @ngInject */
		function TokenService(window) {

			return {
				getToken: getToken,
				setToken: setToken
			};

			function getToken() {
				if(window.sessionStorage.act) {
					return window.sessionStorage.act;
				} else {
					return '';
				}
			};

			function setToken(val) {
				window.sessionStorage.act = val;
			};		
		}
})();

// })();

(function() {
    'use strict';

    ssceexamsuiApp
		.filter('examtypefilter', function () {
			return function (val) {
				if (val == 'SSCE') { 
					return 'Senior School Certificate Examinations (S.S.C.E)'; 
				} else if (val == 'GCE') { 
					return 'General Certificate Examinations (G.C.E)'; 
				} else if (val == 'NECO') { 
					return 'National Examinations Council (N.E.C.O)'; 
				} else if (val == 'JAMB') { 
					return 'Joint Admissions and Matriculation Board (J.A.M.B)'; 
				} else {
					return val; 
				}				
			};
		});
})();

(function() {
    'use strict';

    ssceexamsuiApp
		.filter('phonenumberfilter', function () {
			return function (tel) {
				if (!tel) { return ''; }

				var value = (tel.toString().trim().replace(/^\+/, '')).substring(0,47);

				if (value.match(/[^0-9]/)) {
					return tel.substring(0,9);
				}
				
				return value;
			};
		});
})();

(function() {
    'use strict';

    ssceexamsuiApp
		.filter('progressbarfilter', function () {
			return function (pct) {
				if (pct < 50) { 
					return 'progress-bar-success'; 
				} else if ((pct > 50) && (pct < 70)) { 
					return 'progress-bar-info'; 
				} else if ((pct > 70) && (pct < 90)) { 
					return 'progress-bar-warning'; 
				} else if ((pct > 90) && (pct < 100)) {
					return 'progress-bar-danger'; 
				}				
			};
		});
})();

(function() {
    'use strict';

    ssceexamsuiApp
		.filter('selectedexamfilter', function () {
			return function (yr, yrpick) {
				if (yr === yrpick) { 
					return 'chosen'; 
				} else {
					return ''; 
				}				
			};
		});
})();
